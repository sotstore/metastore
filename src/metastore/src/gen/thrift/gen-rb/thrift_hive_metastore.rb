#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'facebook_service'
require 'hive_metastore_types'

module ThriftHiveMetastore
  class Client < ::FacebookService::Client 
    include ::Thrift::Client

    def create_datacenter(datacenter)
      send_create_datacenter(datacenter)
      recv_create_datacenter()
    end

    def send_create_datacenter(datacenter)
      send_message('create_datacenter', Create_datacenter_args, :datacenter => datacenter)
    end

    def recv_create_datacenter()
      result = receive_message(Create_datacenter_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      return
    end

    def get_center(name)
      send_get_center(name)
      return recv_get_center()
    end

    def send_get_center(name)
      send_message('get_center', Get_center_args, :name => name)
    end

    def recv_get_center()
      result = receive_message(Get_center_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_center failed: unknown result')
    end

    def drop_center(name, deleteData, cascade)
      send_drop_center(name, deleteData, cascade)
      recv_drop_center()
    end

    def send_drop_center(name, deleteData, cascade)
      send_message('drop_center', Drop_center_args, :name => name, :deleteData => deleteData, :cascade => cascade)
    end

    def recv_drop_center()
      result = receive_message(Drop_center_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      return
    end

    def update_center(datacenter)
      send_update_center(datacenter)
      recv_update_center()
    end

    def send_update_center(datacenter)
      send_message('update_center', Update_center_args, :datacenter => datacenter)
    end

    def recv_update_center()
      result = receive_message(Update_center_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      return
    end

    def get_all_centers()
      send_get_all_centers()
      return recv_get_all_centers()
    end

    def send_get_all_centers()
      send_message('get_all_centers', Get_all_centers_args)
    end

    def recv_get_all_centers()
      result = receive_message(Get_all_centers_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_centers failed: unknown result')
    end

    def get_local_center()
      send_get_local_center()
      return recv_get_local_center()
    end

    def send_get_local_center()
      send_message('get_local_center', Get_local_center_args)
    end

    def recv_get_local_center()
      result = receive_message(Get_local_center_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_local_center failed: unknown result')
    end

    def get_lucene_index_names(db_name, tbl_name, max_indexes)
      send_get_lucene_index_names(db_name, tbl_name, max_indexes)
      return recv_get_lucene_index_names()
    end

    def send_get_lucene_index_names(db_name, tbl_name, max_indexes)
      send_message('get_lucene_index_names', Get_lucene_index_names_args, :db_name => db_name, :tbl_name => tbl_name, :max_indexes => max_indexes)
    end

    def recv_get_lucene_index_names()
      result = receive_message(Get_lucene_index_names_result)
      return result.success unless result.success.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_lucene_index_names failed: unknown result')
    end

    def get_all_busi_type_cols()
      send_get_all_busi_type_cols()
      return recv_get_all_busi_type_cols()
    end

    def send_get_all_busi_type_cols()
      send_message('get_all_busi_type_cols', Get_all_busi_type_cols_args)
    end

    def recv_get_all_busi_type_cols()
      result = receive_message(Get_all_busi_type_cols_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_busi_type_cols failed: unknown result')
    end

    def get_all_busi_type_datacenters()
      send_get_all_busi_type_datacenters()
      return recv_get_all_busi_type_datacenters()
    end

    def send_get_all_busi_type_datacenters()
      send_message('get_all_busi_type_datacenters', Get_all_busi_type_datacenters_args)
    end

    def recv_get_all_busi_type_datacenters()
      result = receive_message(Get_all_busi_type_datacenters_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_busi_type_datacenters failed: unknown result')
    end

    def append_busi_type_datacenter(busiTypeDatacenter)
      send_append_busi_type_datacenter(busiTypeDatacenter)
      recv_append_busi_type_datacenter()
    end

    def send_append_busi_type_datacenter(busiTypeDatacenter)
      send_message('append_busi_type_datacenter', Append_busi_type_datacenter_args, :busiTypeDatacenter => busiTypeDatacenter)
    end

    def recv_append_busi_type_datacenter()
      result = receive_message(Append_busi_type_datacenter_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def add_datawarehouse_sql(dwNum, sql)
      send_add_datawarehouse_sql(dwNum, sql)
      return recv_add_datawarehouse_sql()
    end

    def send_add_datawarehouse_sql(dwNum, sql)
      send_message('add_datawarehouse_sql', Add_datawarehouse_sql_args, :dwNum => dwNum, :sql => sql)
    end

    def recv_add_datawarehouse_sql()
      result = receive_message(Add_datawarehouse_sql_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_datawarehouse_sql failed: unknown result')
    end

    def showBusitypes()
      send_showBusitypes()
      return recv_showBusitypes()
    end

    def send_showBusitypes()
      send_message('showBusitypes', ShowBusitypes_args)
    end

    def recv_showBusitypes()
      result = receive_message(ShowBusitypes_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'showBusitypes failed: unknown result')
    end

    def createBusitype(busitype)
      send_createBusitype(busitype)
      return recv_createBusitype()
    end

    def send_createBusitype(busitype)
      send_message('createBusitype', CreateBusitype_args, :busitype => busitype)
    end

    def recv_createBusitype()
      result = receive_message(CreateBusitype_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createBusitype failed: unknown result')
    end

    def add_partition_files(part, files)
      send_add_partition_files(part, files)
      return recv_add_partition_files()
    end

    def send_add_partition_files(part, files)
      send_message('add_partition_files', Add_partition_files_args, :part => part, :files => files)
    end

    def recv_add_partition_files()
      result = receive_message(Add_partition_files_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_partition_files failed: unknown result')
    end

    def drop_partition_files(part, files)
      send_drop_partition_files(part, files)
      return recv_drop_partition_files()
    end

    def send_drop_partition_files(part, files)
      send_message('drop_partition_files', Drop_partition_files_args, :part => part, :files => files)
    end

    def recv_drop_partition_files()
      result = receive_message(Drop_partition_files_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_partition_files failed: unknown result')
    end

    def add_subpartition_files(subpart, files)
      send_add_subpartition_files(subpart, files)
      return recv_add_subpartition_files()
    end

    def send_add_subpartition_files(subpart, files)
      send_message('add_subpartition_files', Add_subpartition_files_args, :subpart => subpart, :files => files)
    end

    def recv_add_subpartition_files()
      result = receive_message(Add_subpartition_files_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_subpartition_files failed: unknown result')
    end

    def drop_subpartition_files(subpart, files)
      send_drop_subpartition_files(subpart, files)
      return recv_drop_subpartition_files()
    end

    def send_drop_subpartition_files(subpart, files)
      send_message('drop_subpartition_files', Drop_subpartition_files_args, :subpart => subpart, :files => files)
    end

    def recv_drop_subpartition_files()
      result = receive_message(Drop_subpartition_files_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_subpartition_files failed: unknown result')
    end

    def add_partition_index(index, part)
      send_add_partition_index(index, part)
      return recv_add_partition_index()
    end

    def send_add_partition_index(index, part)
      send_message('add_partition_index', Add_partition_index_args, :index => index, :part => part)
    end

    def recv_add_partition_index()
      result = receive_message(Add_partition_index_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_partition_index failed: unknown result')
    end

    def drop_partition_index(index, part)
      send_drop_partition_index(index, part)
      return recv_drop_partition_index()
    end

    def send_drop_partition_index(index, part)
      send_message('drop_partition_index', Drop_partition_index_args, :index => index, :part => part)
    end

    def recv_drop_partition_index()
      result = receive_message(Drop_partition_index_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_partition_index failed: unknown result')
    end

    def add_subpartition_index(index, part)
      send_add_subpartition_index(index, part)
      return recv_add_subpartition_index()
    end

    def send_add_subpartition_index(index, part)
      send_message('add_subpartition_index', Add_subpartition_index_args, :index => index, :part => part)
    end

    def recv_add_subpartition_index()
      result = receive_message(Add_subpartition_index_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_subpartition_index failed: unknown result')
    end

    def drop_subpartition_index(index, part)
      send_drop_subpartition_index(index, part)
      return recv_drop_subpartition_index()
    end

    def send_drop_subpartition_index(index, part)
      send_message('drop_subpartition_index', Drop_subpartition_index_args, :index => index, :part => part)
    end

    def recv_drop_subpartition_index()
      result = receive_message(Drop_subpartition_index_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_subpartition_index failed: unknown result')
    end

    def add_subpartition(dbname, tbl_name, part_vals, sub_part)
      send_add_subpartition(dbname, tbl_name, part_vals, sub_part)
      return recv_add_subpartition()
    end

    def send_add_subpartition(dbname, tbl_name, part_vals, sub_part)
      send_message('add_subpartition', Add_subpartition_args, :dbname => dbname, :tbl_name => tbl_name, :part_vals => part_vals, :sub_part => sub_part)
    end

    def recv_add_subpartition()
      result = receive_message(Add_subpartition_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_subpartition failed: unknown result')
    end

    def get_subpartitions(dbname, tbl_name, part)
      send_get_subpartitions(dbname, tbl_name, part)
      return recv_get_subpartitions()
    end

    def send_get_subpartitions(dbname, tbl_name, part)
      send_message('get_subpartitions', Get_subpartitions_args, :dbname => dbname, :tbl_name => tbl_name, :part => part)
    end

    def recv_get_subpartitions()
      result = receive_message(Get_subpartitions_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_subpartitions failed: unknown result')
    end

    def add_partition_index_files(index, part, file, originfid)
      send_add_partition_index_files(index, part, file, originfid)
      return recv_add_partition_index_files()
    end

    def send_add_partition_index_files(index, part, file, originfid)
      send_message('add_partition_index_files', Add_partition_index_files_args, :index => index, :part => part, :file => file, :originfid => originfid)
    end

    def recv_add_partition_index_files()
      result = receive_message(Add_partition_index_files_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_partition_index_files failed: unknown result')
    end

    def get_partition_index_files(index, part)
      send_get_partition_index_files(index, part)
      return recv_get_partition_index_files()
    end

    def send_get_partition_index_files(index, part)
      send_message('get_partition_index_files', Get_partition_index_files_args, :index => index, :part => part)
    end

    def recv_get_partition_index_files()
      result = receive_message(Get_partition_index_files_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partition_index_files failed: unknown result')
    end

    def drop_partition_index_files(index, part, file)
      send_drop_partition_index_files(index, part, file)
      return recv_drop_partition_index_files()
    end

    def send_drop_partition_index_files(index, part, file)
      send_message('drop_partition_index_files', Drop_partition_index_files_args, :index => index, :part => part, :file => file)
    end

    def recv_drop_partition_index_files()
      result = receive_message(Drop_partition_index_files_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_partition_index_files failed: unknown result')
    end

    def add_subpartition_index_files(index, subpart, file, originfid)
      send_add_subpartition_index_files(index, subpart, file, originfid)
      return recv_add_subpartition_index_files()
    end

    def send_add_subpartition_index_files(index, subpart, file, originfid)
      send_message('add_subpartition_index_files', Add_subpartition_index_files_args, :index => index, :subpart => subpart, :file => file, :originfid => originfid)
    end

    def recv_add_subpartition_index_files()
      result = receive_message(Add_subpartition_index_files_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_subpartition_index_files failed: unknown result')
    end

    def get_subpartition_index_files(index, subpart)
      send_get_subpartition_index_files(index, subpart)
      return recv_get_subpartition_index_files()
    end

    def send_get_subpartition_index_files(index, subpart)
      send_message('get_subpartition_index_files', Get_subpartition_index_files_args, :index => index, :subpart => subpart)
    end

    def recv_get_subpartition_index_files()
      result = receive_message(Get_subpartition_index_files_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_subpartition_index_files failed: unknown result')
    end

    def drop_subpartition_index_files(index, subpart, file)
      send_drop_subpartition_index_files(index, subpart, file)
      return recv_drop_subpartition_index_files()
    end

    def send_drop_subpartition_index_files(index, subpart, file)
      send_message('drop_subpartition_index_files', Drop_subpartition_index_files_args, :index => index, :subpart => subpart, :file => file)
    end

    def recv_drop_subpartition_index_files()
      result = receive_message(Drop_subpartition_index_files_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_subpartition_index_files failed: unknown result')
    end

    def create_database(database)
      send_create_database(database)
      recv_create_database()
    end

    def send_create_database(database)
      send_message('create_database', Create_database_args, :database => database)
    end

    def recv_create_database()
      result = receive_message(Create_database_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      return
    end

    def get_database(name)
      send_get_database(name)
      return recv_get_database()
    end

    def send_get_database(name)
      send_message('get_database', Get_database_args, :name => name)
    end

    def recv_get_database()
      result = receive_message(Get_database_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_database failed: unknown result')
    end

    def drop_database(name, deleteData, cascade)
      send_drop_database(name, deleteData, cascade)
      recv_drop_database()
    end

    def send_drop_database(name, deleteData, cascade)
      send_message('drop_database', Drop_database_args, :name => name, :deleteData => deleteData, :cascade => cascade)
    end

    def recv_drop_database()
      result = receive_message(Drop_database_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      return
    end

    def get_databases(pattern)
      send_get_databases(pattern)
      return recv_get_databases()
    end

    def send_get_databases(pattern)
      send_message('get_databases', Get_databases_args, :pattern => pattern)
    end

    def recv_get_databases()
      result = receive_message(Get_databases_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_databases failed: unknown result')
    end

    def get_all_databases()
      send_get_all_databases()
      return recv_get_all_databases()
    end

    def send_get_all_databases()
      send_message('get_all_databases', Get_all_databases_args)
    end

    def recv_get_all_databases()
      result = receive_message(Get_all_databases_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_databases failed: unknown result')
    end

    def alter_database(dbname, db)
      send_alter_database(dbname, db)
      recv_alter_database()
    end

    def send_alter_database(dbname, db)
      send_message('alter_database', Alter_database_args, :dbname => dbname, :db => db)
    end

    def recv_alter_database()
      result = receive_message(Alter_database_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def get_type(name)
      send_get_type(name)
      return recv_get_type()
    end

    def send_get_type(name)
      send_message('get_type', Get_type_args, :name => name)
    end

    def recv_get_type()
      result = receive_message(Get_type_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_type failed: unknown result')
    end

    def create_type(type)
      send_create_type(type)
      return recv_create_type()
    end

    def send_create_type(type)
      send_message('create_type', Create_type_args, :type => type)
    end

    def recv_create_type()
      result = receive_message(Create_type_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_type failed: unknown result')
    end

    def drop_type(type)
      send_drop_type(type)
      return recv_drop_type()
    end

    def send_drop_type(type)
      send_message('drop_type', Drop_type_args, :type => type)
    end

    def recv_drop_type()
      result = receive_message(Drop_type_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_type failed: unknown result')
    end

    def get_type_all(name)
      send_get_type_all(name)
      return recv_get_type_all()
    end

    def send_get_type_all(name)
      send_message('get_type_all', Get_type_all_args, :name => name)
    end

    def recv_get_type_all()
      result = receive_message(Get_type_all_result)
      return result.success unless result.success.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_type_all failed: unknown result')
    end

    def get_fields(db_name, table_name)
      send_get_fields(db_name, table_name)
      return recv_get_fields()
    end

    def send_get_fields(db_name, table_name)
      send_message('get_fields', Get_fields_args, :db_name => db_name, :table_name => table_name)
    end

    def recv_get_fields()
      result = receive_message(Get_fields_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_fields failed: unknown result')
    end

    def get_schema(db_name, table_name)
      send_get_schema(db_name, table_name)
      return recv_get_schema()
    end

    def send_get_schema(db_name, table_name)
      send_message('get_schema', Get_schema_args, :db_name => db_name, :table_name => table_name)
    end

    def recv_get_schema()
      result = receive_message(Get_schema_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema failed: unknown result')
    end

    def create_table(tbl)
      send_create_table(tbl)
      recv_create_table()
    end

    def send_create_table(tbl)
      send_message('create_table', Create_table_args, :tbl => tbl)
    end

    def recv_create_table()
      result = receive_message(Create_table_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      return
    end

    def create_table_with_environment_context(tbl, environment_context)
      send_create_table_with_environment_context(tbl, environment_context)
      recv_create_table_with_environment_context()
    end

    def send_create_table_with_environment_context(tbl, environment_context)
      send_message('create_table_with_environment_context', Create_table_with_environment_context_args, :tbl => tbl, :environment_context => environment_context)
    end

    def recv_create_table_with_environment_context()
      result = receive_message(Create_table_with_environment_context_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      return
    end

    def drop_table(dbname, name, deleteData)
      send_drop_table(dbname, name, deleteData)
      recv_drop_table()
    end

    def send_drop_table(dbname, name, deleteData)
      send_message('drop_table', Drop_table_args, :dbname => dbname, :name => name, :deleteData => deleteData)
    end

    def recv_drop_table()
      result = receive_message(Drop_table_result)
      raise result.o1 unless result.o1.nil?
      raise result.o3 unless result.o3.nil?
      return
    end

    def get_tables(db_name, pattern)
      send_get_tables(db_name, pattern)
      return recv_get_tables()
    end

    def send_get_tables(db_name, pattern)
      send_message('get_tables', Get_tables_args, :db_name => db_name, :pattern => pattern)
    end

    def recv_get_tables()
      result = receive_message(Get_tables_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_tables failed: unknown result')
    end

    def get_all_tables(db_name)
      send_get_all_tables(db_name)
      return recv_get_all_tables()
    end

    def send_get_all_tables(db_name)
      send_message('get_all_tables', Get_all_tables_args, :db_name => db_name)
    end

    def recv_get_all_tables()
      result = receive_message(Get_all_tables_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_tables failed: unknown result')
    end

    def get_table(dbname, tbl_name)
      send_get_table(dbname, tbl_name)
      return recv_get_table()
    end

    def send_get_table(dbname, tbl_name)
      send_message('get_table', Get_table_args, :dbname => dbname, :tbl_name => tbl_name)
    end

    def recv_get_table()
      result = receive_message(Get_table_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table failed: unknown result')
    end

    def get_table_objects_by_name(dbname, tbl_names)
      send_get_table_objects_by_name(dbname, tbl_names)
      return recv_get_table_objects_by_name()
    end

    def send_get_table_objects_by_name(dbname, tbl_names)
      send_message('get_table_objects_by_name', Get_table_objects_by_name_args, :dbname => dbname, :tbl_names => tbl_names)
    end

    def recv_get_table_objects_by_name()
      result = receive_message(Get_table_objects_by_name_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_objects_by_name failed: unknown result')
    end

    def get_table_names_by_filter(dbname, filter, max_tables)
      send_get_table_names_by_filter(dbname, filter, max_tables)
      return recv_get_table_names_by_filter()
    end

    def send_get_table_names_by_filter(dbname, filter, max_tables)
      send_message('get_table_names_by_filter', Get_table_names_by_filter_args, :dbname => dbname, :filter => filter, :max_tables => max_tables)
    end

    def recv_get_table_names_by_filter()
      result = receive_message(Get_table_names_by_filter_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_names_by_filter failed: unknown result')
    end

    def alter_table(dbname, tbl_name, new_tbl)
      send_alter_table(dbname, tbl_name, new_tbl)
      recv_alter_table()
    end

    def send_alter_table(dbname, tbl_name, new_tbl)
      send_message('alter_table', Alter_table_args, :dbname => dbname, :tbl_name => tbl_name, :new_tbl => new_tbl)
    end

    def recv_alter_table()
      result = receive_message(Alter_table_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context)
      send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context)
      recv_alter_table_with_environment_context()
    end

    def send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context)
      send_message('alter_table_with_environment_context', Alter_table_with_environment_context_args, :dbname => dbname, :tbl_name => tbl_name, :new_tbl => new_tbl, :environment_context => environment_context)
    end

    def recv_alter_table_with_environment_context()
      result = receive_message(Alter_table_with_environment_context_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def add_partition(new_part)
      send_add_partition(new_part)
      return recv_add_partition()
    end

    def send_add_partition(new_part)
      send_message('add_partition', Add_partition_args, :new_part => new_part)
    end

    def recv_add_partition()
      result = receive_message(Add_partition_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_partition failed: unknown result')
    end

    def add_partition_with_environment_context(new_part, environment_context)
      send_add_partition_with_environment_context(new_part, environment_context)
      return recv_add_partition_with_environment_context()
    end

    def send_add_partition_with_environment_context(new_part, environment_context)
      send_message('add_partition_with_environment_context', Add_partition_with_environment_context_args, :new_part => new_part, :environment_context => environment_context)
    end

    def recv_add_partition_with_environment_context()
      result = receive_message(Add_partition_with_environment_context_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_partition_with_environment_context failed: unknown result')
    end

    def add_partitions(new_parts)
      send_add_partitions(new_parts)
      return recv_add_partitions()
    end

    def send_add_partitions(new_parts)
      send_message('add_partitions', Add_partitions_args, :new_parts => new_parts)
    end

    def recv_add_partitions()
      result = receive_message(Add_partitions_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_partitions failed: unknown result')
    end

    def append_partition(db_name, tbl_name, part_vals)
      send_append_partition(db_name, tbl_name, part_vals)
      return recv_append_partition()
    end

    def send_append_partition(db_name, tbl_name, part_vals)
      send_message('append_partition', Append_partition_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals)
    end

    def recv_append_partition()
      result = receive_message(Append_partition_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'append_partition failed: unknown result')
    end

    def append_partition_by_name(db_name, tbl_name, part_name)
      send_append_partition_by_name(db_name, tbl_name, part_name)
      return recv_append_partition_by_name()
    end

    def send_append_partition_by_name(db_name, tbl_name, part_name)
      send_message('append_partition_by_name', Append_partition_by_name_args, :db_name => db_name, :tbl_name => tbl_name, :part_name => part_name)
    end

    def recv_append_partition_by_name()
      result = receive_message(Append_partition_by_name_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'append_partition_by_name failed: unknown result')
    end

    def drop_partition(db_name, tbl_name, part_vals, deleteData)
      send_drop_partition(db_name, tbl_name, part_vals, deleteData)
      return recv_drop_partition()
    end

    def send_drop_partition(db_name, tbl_name, part_vals, deleteData)
      send_message('drop_partition', Drop_partition_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals, :deleteData => deleteData)
    end

    def recv_drop_partition()
      result = receive_message(Drop_partition_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_partition failed: unknown result')
    end

    def drop_partition_by_name(db_name, tbl_name, part_name, deleteData)
      send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData)
      return recv_drop_partition_by_name()
    end

    def send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData)
      send_message('drop_partition_by_name', Drop_partition_by_name_args, :db_name => db_name, :tbl_name => tbl_name, :part_name => part_name, :deleteData => deleteData)
    end

    def recv_drop_partition_by_name()
      result = receive_message(Drop_partition_by_name_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_partition_by_name failed: unknown result')
    end

    def get_partition(db_name, tbl_name, part_vals)
      send_get_partition(db_name, tbl_name, part_vals)
      return recv_get_partition()
    end

    def send_get_partition(db_name, tbl_name, part_vals)
      send_message('get_partition', Get_partition_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals)
    end

    def recv_get_partition()
      result = receive_message(Get_partition_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partition failed: unknown result')
    end

    def get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names)
      send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names)
      return recv_get_partition_with_auth()
    end

    def send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names)
      send_message('get_partition_with_auth', Get_partition_with_auth_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals, :user_name => user_name, :group_names => group_names)
    end

    def recv_get_partition_with_auth()
      result = receive_message(Get_partition_with_auth_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partition_with_auth failed: unknown result')
    end

    def get_partition_by_name(db_name, tbl_name, part_name)
      send_get_partition_by_name(db_name, tbl_name, part_name)
      return recv_get_partition_by_name()
    end

    def send_get_partition_by_name(db_name, tbl_name, part_name)
      send_message('get_partition_by_name', Get_partition_by_name_args, :db_name => db_name, :tbl_name => tbl_name, :part_name => part_name)
    end

    def recv_get_partition_by_name()
      result = receive_message(Get_partition_by_name_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partition_by_name failed: unknown result')
    end

    def get_partitions(db_name, tbl_name, max_parts)
      send_get_partitions(db_name, tbl_name, max_parts)
      return recv_get_partitions()
    end

    def send_get_partitions(db_name, tbl_name, max_parts)
      send_message('get_partitions', Get_partitions_args, :db_name => db_name, :tbl_name => tbl_name, :max_parts => max_parts)
    end

    def recv_get_partitions()
      result = receive_message(Get_partitions_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partitions failed: unknown result')
    end

    def get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names)
      send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names)
      return recv_get_partitions_with_auth()
    end

    def send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names)
      send_message('get_partitions_with_auth', Get_partitions_with_auth_args, :db_name => db_name, :tbl_name => tbl_name, :max_parts => max_parts, :user_name => user_name, :group_names => group_names)
    end

    def recv_get_partitions_with_auth()
      result = receive_message(Get_partitions_with_auth_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partitions_with_auth failed: unknown result')
    end

    def get_partition_names(db_name, tbl_name, max_parts)
      send_get_partition_names(db_name, tbl_name, max_parts)
      return recv_get_partition_names()
    end

    def send_get_partition_names(db_name, tbl_name, max_parts)
      send_message('get_partition_names', Get_partition_names_args, :db_name => db_name, :tbl_name => tbl_name, :max_parts => max_parts)
    end

    def recv_get_partition_names()
      result = receive_message(Get_partition_names_result)
      return result.success unless result.success.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partition_names failed: unknown result')
    end

    def get_partitions_ps(db_name, tbl_name, part_vals, max_parts)
      send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts)
      return recv_get_partitions_ps()
    end

    def send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts)
      send_message('get_partitions_ps', Get_partitions_ps_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals, :max_parts => max_parts)
    end

    def recv_get_partitions_ps()
      result = receive_message(Get_partitions_ps_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partitions_ps failed: unknown result')
    end

    def get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names)
      send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names)
      return recv_get_partitions_ps_with_auth()
    end

    def send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names)
      send_message('get_partitions_ps_with_auth', Get_partitions_ps_with_auth_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals, :max_parts => max_parts, :user_name => user_name, :group_names => group_names)
    end

    def recv_get_partitions_ps_with_auth()
      result = receive_message(Get_partitions_ps_with_auth_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partitions_ps_with_auth failed: unknown result')
    end

    def get_partition_names_ps(db_name, tbl_name, part_vals, max_parts)
      send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts)
      return recv_get_partition_names_ps()
    end

    def send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts)
      send_message('get_partition_names_ps', Get_partition_names_ps_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals, :max_parts => max_parts)
    end

    def recv_get_partition_names_ps()
      result = receive_message(Get_partition_names_ps_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partition_names_ps failed: unknown result')
    end

    def get_partitions_by_filter(db_name, tbl_name, filter, max_parts)
      send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts)
      return recv_get_partitions_by_filter()
    end

    def send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts)
      send_message('get_partitions_by_filter', Get_partitions_by_filter_args, :db_name => db_name, :tbl_name => tbl_name, :filter => filter, :max_parts => max_parts)
    end

    def recv_get_partitions_by_filter()
      result = receive_message(Get_partitions_by_filter_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partitions_by_filter failed: unknown result')
    end

    def get_partitions_by_names(db_name, tbl_name, names)
      send_get_partitions_by_names(db_name, tbl_name, names)
      return recv_get_partitions_by_names()
    end

    def send_get_partitions_by_names(db_name, tbl_name, names)
      send_message('get_partitions_by_names', Get_partitions_by_names_args, :db_name => db_name, :tbl_name => tbl_name, :names => names)
    end

    def recv_get_partitions_by_names()
      result = receive_message(Get_partitions_by_names_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partitions_by_names failed: unknown result')
    end

    def alter_partition(db_name, tbl_name, new_part)
      send_alter_partition(db_name, tbl_name, new_part)
      recv_alter_partition()
    end

    def send_alter_partition(db_name, tbl_name, new_part)
      send_message('alter_partition', Alter_partition_args, :db_name => db_name, :tbl_name => tbl_name, :new_part => new_part)
    end

    def recv_alter_partition()
      result = receive_message(Alter_partition_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def alter_partitions(db_name, tbl_name, new_parts)
      send_alter_partitions(db_name, tbl_name, new_parts)
      recv_alter_partitions()
    end

    def send_alter_partitions(db_name, tbl_name, new_parts)
      send_message('alter_partitions', Alter_partitions_args, :db_name => db_name, :tbl_name => tbl_name, :new_parts => new_parts)
    end

    def recv_alter_partitions()
      result = receive_message(Alter_partitions_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context)
      send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context)
      recv_alter_partition_with_environment_context()
    end

    def send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context)
      send_message('alter_partition_with_environment_context', Alter_partition_with_environment_context_args, :db_name => db_name, :tbl_name => tbl_name, :new_part => new_part, :environment_context => environment_context)
    end

    def recv_alter_partition_with_environment_context()
      result = receive_message(Alter_partition_with_environment_context_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def rename_partition(db_name, tbl_name, part_vals, new_part)
      send_rename_partition(db_name, tbl_name, part_vals, new_part)
      recv_rename_partition()
    end

    def send_rename_partition(db_name, tbl_name, part_vals, new_part)
      send_message('rename_partition', Rename_partition_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals, :new_part => new_part)
    end

    def recv_rename_partition()
      result = receive_message(Rename_partition_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def get_config_value(name, defaultValue)
      send_get_config_value(name, defaultValue)
      return recv_get_config_value()
    end

    def send_get_config_value(name, defaultValue)
      send_message('get_config_value', Get_config_value_args, :name => name, :defaultValue => defaultValue)
    end

    def recv_get_config_value()
      result = receive_message(Get_config_value_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_config_value failed: unknown result')
    end

    def partition_name_to_vals(part_name)
      send_partition_name_to_vals(part_name)
      return recv_partition_name_to_vals()
    end

    def send_partition_name_to_vals(part_name)
      send_message('partition_name_to_vals', Partition_name_to_vals_args, :part_name => part_name)
    end

    def recv_partition_name_to_vals()
      result = receive_message(Partition_name_to_vals_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'partition_name_to_vals failed: unknown result')
    end

    def partition_name_to_spec(part_name)
      send_partition_name_to_spec(part_name)
      return recv_partition_name_to_spec()
    end

    def send_partition_name_to_spec(part_name)
      send_message('partition_name_to_spec', Partition_name_to_spec_args, :part_name => part_name)
    end

    def recv_partition_name_to_spec()
      result = receive_message(Partition_name_to_spec_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'partition_name_to_spec failed: unknown result')
    end

    def markPartitionForEvent(db_name, tbl_name, part_vals, eventType)
      send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType)
      recv_markPartitionForEvent()
    end

    def send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType)
      send_message('markPartitionForEvent', MarkPartitionForEvent_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals, :eventType => eventType)
    end

    def recv_markPartitionForEvent()
      result = receive_message(MarkPartitionForEvent_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      raise result.o5 unless result.o5.nil?
      raise result.o6 unless result.o6.nil?
      return
    end

    def isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType)
      send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType)
      return recv_isPartitionMarkedForEvent()
    end

    def send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType)
      send_message('isPartitionMarkedForEvent', IsPartitionMarkedForEvent_args, :db_name => db_name, :tbl_name => tbl_name, :part_vals => part_vals, :eventType => eventType)
    end

    def recv_isPartitionMarkedForEvent()
      result = receive_message(IsPartitionMarkedForEvent_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      raise result.o5 unless result.o5.nil?
      raise result.o6 unless result.o6.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isPartitionMarkedForEvent failed: unknown result')
    end

    def add_index(new_index, index_table)
      send_add_index(new_index, index_table)
      return recv_add_index()
    end

    def send_add_index(new_index, index_table)
      send_message('add_index', Add_index_args, :new_index => new_index, :index_table => index_table)
    end

    def recv_add_index()
      result = receive_message(Add_index_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_index failed: unknown result')
    end

    def alter_index(dbname, base_tbl_name, idx_name, new_idx)
      send_alter_index(dbname, base_tbl_name, idx_name, new_idx)
      recv_alter_index()
    end

    def send_alter_index(dbname, base_tbl_name, idx_name, new_idx)
      send_message('alter_index', Alter_index_args, :dbname => dbname, :base_tbl_name => base_tbl_name, :idx_name => idx_name, :new_idx => new_idx)
    end

    def recv_alter_index()
      result = receive_message(Alter_index_result)
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      return
    end

    def drop_index_by_name(db_name, tbl_name, index_name, deleteData)
      send_drop_index_by_name(db_name, tbl_name, index_name, deleteData)
      return recv_drop_index_by_name()
    end

    def send_drop_index_by_name(db_name, tbl_name, index_name, deleteData)
      send_message('drop_index_by_name', Drop_index_by_name_args, :db_name => db_name, :tbl_name => tbl_name, :index_name => index_name, :deleteData => deleteData)
    end

    def recv_drop_index_by_name()
      result = receive_message(Drop_index_by_name_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_index_by_name failed: unknown result')
    end

    def get_index_by_name(db_name, tbl_name, index_name)
      send_get_index_by_name(db_name, tbl_name, index_name)
      return recv_get_index_by_name()
    end

    def send_get_index_by_name(db_name, tbl_name, index_name)
      send_message('get_index_by_name', Get_index_by_name_args, :db_name => db_name, :tbl_name => tbl_name, :index_name => index_name)
    end

    def recv_get_index_by_name()
      result = receive_message(Get_index_by_name_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_index_by_name failed: unknown result')
    end

    def get_indexes(db_name, tbl_name, max_indexes)
      send_get_indexes(db_name, tbl_name, max_indexes)
      return recv_get_indexes()
    end

    def send_get_indexes(db_name, tbl_name, max_indexes)
      send_message('get_indexes', Get_indexes_args, :db_name => db_name, :tbl_name => tbl_name, :max_indexes => max_indexes)
    end

    def recv_get_indexes()
      result = receive_message(Get_indexes_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_indexes failed: unknown result')
    end

    def get_index_names(db_name, tbl_name, max_indexes)
      send_get_index_names(db_name, tbl_name, max_indexes)
      return recv_get_index_names()
    end

    def send_get_index_names(db_name, tbl_name, max_indexes)
      send_message('get_index_names', Get_index_names_args, :db_name => db_name, :tbl_name => tbl_name, :max_indexes => max_indexes)
    end

    def recv_get_index_names()
      result = receive_message(Get_index_names_result)
      return result.success unless result.success.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_index_names failed: unknown result')
    end

    def update_table_column_statistics(stats_obj)
      send_update_table_column_statistics(stats_obj)
      return recv_update_table_column_statistics()
    end

    def send_update_table_column_statistics(stats_obj)
      send_message('update_table_column_statistics', Update_table_column_statistics_args, :stats_obj => stats_obj)
    end

    def recv_update_table_column_statistics()
      result = receive_message(Update_table_column_statistics_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'update_table_column_statistics failed: unknown result')
    end

    def update_partition_column_statistics(stats_obj)
      send_update_partition_column_statistics(stats_obj)
      return recv_update_partition_column_statistics()
    end

    def send_update_partition_column_statistics(stats_obj)
      send_message('update_partition_column_statistics', Update_partition_column_statistics_args, :stats_obj => stats_obj)
    end

    def recv_update_partition_column_statistics()
      result = receive_message(Update_partition_column_statistics_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'update_partition_column_statistics failed: unknown result')
    end

    def get_table_column_statistics(db_name, tbl_name, col_name)
      send_get_table_column_statistics(db_name, tbl_name, col_name)
      return recv_get_table_column_statistics()
    end

    def send_get_table_column_statistics(db_name, tbl_name, col_name)
      send_message('get_table_column_statistics', Get_table_column_statistics_args, :db_name => db_name, :tbl_name => tbl_name, :col_name => col_name)
    end

    def recv_get_table_column_statistics()
      result = receive_message(Get_table_column_statistics_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_column_statistics failed: unknown result')
    end

    def get_partition_column_statistics(db_name, tbl_name, part_name, col_name)
      send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name)
      return recv_get_partition_column_statistics()
    end

    def send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name)
      send_message('get_partition_column_statistics', Get_partition_column_statistics_args, :db_name => db_name, :tbl_name => tbl_name, :part_name => part_name, :col_name => col_name)
    end

    def recv_get_partition_column_statistics()
      result = receive_message(Get_partition_column_statistics_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_partition_column_statistics failed: unknown result')
    end

    def delete_partition_column_statistics(db_name, tbl_name, part_name, col_name)
      send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name)
      return recv_delete_partition_column_statistics()
    end

    def send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name)
      send_message('delete_partition_column_statistics', Delete_partition_column_statistics_args, :db_name => db_name, :tbl_name => tbl_name, :part_name => part_name, :col_name => col_name)
    end

    def recv_delete_partition_column_statistics()
      result = receive_message(Delete_partition_column_statistics_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'delete_partition_column_statistics failed: unknown result')
    end

    def delete_table_column_statistics(db_name, tbl_name, col_name)
      send_delete_table_column_statistics(db_name, tbl_name, col_name)
      return recv_delete_table_column_statistics()
    end

    def send_delete_table_column_statistics(db_name, tbl_name, col_name)
      send_message('delete_table_column_statistics', Delete_table_column_statistics_args, :db_name => db_name, :tbl_name => tbl_name, :col_name => col_name)
    end

    def recv_delete_table_column_statistics()
      result = receive_message(Delete_table_column_statistics_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise result.o3 unless result.o3.nil?
      raise result.o4 unless result.o4.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'delete_table_column_statistics failed: unknown result')
    end

    def create_role(role)
      send_create_role(role)
      return recv_create_role()
    end

    def send_create_role(role)
      send_message('create_role', Create_role_args, :role => role)
    end

    def recv_create_role()
      result = receive_message(Create_role_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_role failed: unknown result')
    end

    def drop_role(role_name)
      send_drop_role(role_name)
      return recv_drop_role()
    end

    def send_drop_role(role_name)
      send_message('drop_role', Drop_role_args, :role_name => role_name)
    end

    def recv_drop_role()
      result = receive_message(Drop_role_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'drop_role failed: unknown result')
    end

    def get_role_names()
      send_get_role_names()
      return recv_get_role_names()
    end

    def send_get_role_names()
      send_message('get_role_names', Get_role_names_args)
    end

    def recv_get_role_names()
      result = receive_message(Get_role_names_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_role_names failed: unknown result')
    end

    def grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option)
      send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option)
      return recv_grant_role()
    end

    def send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option)
      send_message('grant_role', Grant_role_args, :role_name => role_name, :principal_name => principal_name, :principal_type => principal_type, :grantor => grantor, :grantorType => grantorType, :grant_option => grant_option)
    end

    def recv_grant_role()
      result = receive_message(Grant_role_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'grant_role failed: unknown result')
    end

    def revoke_role(role_name, principal_name, principal_type)
      send_revoke_role(role_name, principal_name, principal_type)
      return recv_revoke_role()
    end

    def send_revoke_role(role_name, principal_name, principal_type)
      send_message('revoke_role', Revoke_role_args, :role_name => role_name, :principal_name => principal_name, :principal_type => principal_type)
    end

    def recv_revoke_role()
      result = receive_message(Revoke_role_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'revoke_role failed: unknown result')
    end

    def list_roles(principal_name, principal_type)
      send_list_roles(principal_name, principal_type)
      return recv_list_roles()
    end

    def send_list_roles(principal_name, principal_type)
      send_message('list_roles', List_roles_args, :principal_name => principal_name, :principal_type => principal_type)
    end

    def recv_list_roles()
      result = receive_message(List_roles_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_roles failed: unknown result')
    end

    def get_privilege_set(hiveObject, user_name, group_names)
      send_get_privilege_set(hiveObject, user_name, group_names)
      return recv_get_privilege_set()
    end

    def send_get_privilege_set(hiveObject, user_name, group_names)
      send_message('get_privilege_set', Get_privilege_set_args, :hiveObject => hiveObject, :user_name => user_name, :group_names => group_names)
    end

    def recv_get_privilege_set()
      result = receive_message(Get_privilege_set_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_privilege_set failed: unknown result')
    end

    def list_privileges(principal_name, principal_type, hiveObject)
      send_list_privileges(principal_name, principal_type, hiveObject)
      return recv_list_privileges()
    end

    def send_list_privileges(principal_name, principal_type, hiveObject)
      send_message('list_privileges', List_privileges_args, :principal_name => principal_name, :principal_type => principal_type, :hiveObject => hiveObject)
    end

    def recv_list_privileges()
      result = receive_message(List_privileges_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_privileges failed: unknown result')
    end

    def grant_privileges(privileges)
      send_grant_privileges(privileges)
      return recv_grant_privileges()
    end

    def send_grant_privileges(privileges)
      send_message('grant_privileges', Grant_privileges_args, :privileges => privileges)
    end

    def recv_grant_privileges()
      result = receive_message(Grant_privileges_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'grant_privileges failed: unknown result')
    end

    def revoke_privileges(privileges)
      send_revoke_privileges(privileges)
      return recv_revoke_privileges()
    end

    def send_revoke_privileges(privileges)
      send_message('revoke_privileges', Revoke_privileges_args, :privileges => privileges)
    end

    def recv_revoke_privileges()
      result = receive_message(Revoke_privileges_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'revoke_privileges failed: unknown result')
    end

    def set_ugi(user_name, group_names)
      send_set_ugi(user_name, group_names)
      return recv_set_ugi()
    end

    def send_set_ugi(user_name, group_names)
      send_message('set_ugi', Set_ugi_args, :user_name => user_name, :group_names => group_names)
    end

    def recv_set_ugi()
      result = receive_message(Set_ugi_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'set_ugi failed: unknown result')
    end

    def get_delegation_token(token_owner, renewer_kerberos_principal_name)
      send_get_delegation_token(token_owner, renewer_kerberos_principal_name)
      return recv_get_delegation_token()
    end

    def send_get_delegation_token(token_owner, renewer_kerberos_principal_name)
      send_message('get_delegation_token', Get_delegation_token_args, :token_owner => token_owner, :renewer_kerberos_principal_name => renewer_kerberos_principal_name)
    end

    def recv_get_delegation_token()
      result = receive_message(Get_delegation_token_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_delegation_token failed: unknown result')
    end

    def renew_delegation_token(token_str_form)
      send_renew_delegation_token(token_str_form)
      return recv_renew_delegation_token()
    end

    def send_renew_delegation_token(token_str_form)
      send_message('renew_delegation_token', Renew_delegation_token_args, :token_str_form => token_str_form)
    end

    def recv_renew_delegation_token()
      result = receive_message(Renew_delegation_token_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'renew_delegation_token failed: unknown result')
    end

    def cancel_delegation_token(token_str_form)
      send_cancel_delegation_token(token_str_form)
      recv_cancel_delegation_token()
    end

    def send_cancel_delegation_token(token_str_form)
      send_message('cancel_delegation_token', Cancel_delegation_token_args, :token_str_form => token_str_form)
    end

    def recv_cancel_delegation_token()
      result = receive_message(Cancel_delegation_token_result)
      raise result.o1 unless result.o1.nil?
      return
    end

    def create_file(node_name, repnr, db_name, table_name)
      send_create_file(node_name, repnr, db_name, table_name)
      return recv_create_file()
    end

    def send_create_file(node_name, repnr, db_name, table_name)
      send_message('create_file', Create_file_args, :node_name => node_name, :repnr => repnr, :db_name => db_name, :table_name => table_name)
    end

    def recv_create_file()
      result = receive_message(Create_file_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_file failed: unknown result')
    end

    def close_file(file)
      send_close_file(file)
      return recv_close_file()
    end

    def send_close_file(file)
      send_message('close_file', Close_file_args, :file => file)
    end

    def recv_close_file()
      result = receive_message(Close_file_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'close_file failed: unknown result')
    end

    def online_filelocation(file)
      send_online_filelocation(file)
      return recv_online_filelocation()
    end

    def send_online_filelocation(file)
      send_message('online_filelocation', Online_filelocation_args, :file => file)
    end

    def recv_online_filelocation()
      result = receive_message(Online_filelocation_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'online_filelocation failed: unknown result')
    end

    def toggle_safemode()
      send_toggle_safemode()
      return recv_toggle_safemode()
    end

    def send_toggle_safemode()
      send_message('toggle_safemode', Toggle_safemode_args)
    end

    def recv_toggle_safemode()
      result = receive_message(Toggle_safemode_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'toggle_safemode failed: unknown result')
    end

    def get_file_by_id(fid)
      send_get_file_by_id(fid)
      return recv_get_file_by_id()
    end

    def send_get_file_by_id(fid)
      send_message('get_file_by_id', Get_file_by_id_args, :fid => fid)
    end

    def recv_get_file_by_id()
      result = receive_message(Get_file_by_id_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_file_by_id failed: unknown result')
    end

    def get_file_by_name(node, devid, location)
      send_get_file_by_name(node, devid, location)
      return recv_get_file_by_name()
    end

    def send_get_file_by_name(node, devid, location)
      send_message('get_file_by_name', Get_file_by_name_args, :node => node, :devid => devid, :location => location)
    end

    def recv_get_file_by_name()
      result = receive_message(Get_file_by_name_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_file_by_name failed: unknown result')
    end

    def rm_file_logical(file)
      send_rm_file_logical(file)
      return recv_rm_file_logical()
    end

    def send_rm_file_logical(file)
      send_message('rm_file_logical', Rm_file_logical_args, :file => file)
    end

    def recv_rm_file_logical()
      result = receive_message(Rm_file_logical_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'rm_file_logical failed: unknown result')
    end

    def restore_file(file)
      send_restore_file(file)
      return recv_restore_file()
    end

    def send_restore_file(file)
      send_message('restore_file', Restore_file_args, :file => file)
    end

    def recv_restore_file()
      result = receive_message(Restore_file_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'restore_file failed: unknown result')
    end

    def rm_file_physical(file)
      send_rm_file_physical(file)
      return recv_rm_file_physical()
    end

    def send_rm_file_physical(file)
      send_message('rm_file_physical', Rm_file_physical_args, :file => file)
    end

    def recv_rm_file_physical()
      result = receive_message(Rm_file_physical_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise result.o2 unless result.o2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'rm_file_physical failed: unknown result')
    end

    def get_node(node_name)
      send_get_node(node_name)
      return recv_get_node()
    end

    def send_get_node(node_name)
      send_message('get_node', Get_node_args, :node_name => node_name)
    end

    def recv_get_node()
      result = receive_message(Get_node_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_node failed: unknown result')
    end

    def add_node(node_name, ipl)
      send_add_node(node_name, ipl)
      return recv_add_node()
    end

    def send_add_node(node_name, ipl)
      send_message('add_node', Add_node_args, :node_name => node_name, :ipl => ipl)
    end

    def recv_add_node()
      result = receive_message(Add_node_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_node failed: unknown result')
    end

    def del_node(node_name)
      send_del_node(node_name)
      return recv_del_node()
    end

    def send_del_node(node_name)
      send_message('del_node', Del_node_args, :node_name => node_name)
    end

    def recv_del_node()
      result = receive_message(Del_node_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'del_node failed: unknown result')
    end

    def create_device(devid, prop, node_name)
      send_create_device(devid, prop, node_name)
      return recv_create_device()
    end

    def send_create_device(devid, prop, node_name)
      send_message('create_device', Create_device_args, :devid => devid, :prop => prop, :node_name => node_name)
    end

    def recv_create_device()
      result = receive_message(Create_device_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_device failed: unknown result')
    end

    def del_device(devid)
      send_del_device(devid)
      return recv_del_device()
    end

    def send_del_device(devid)
      send_message('del_device', Del_device_args, :devid => devid)
    end

    def recv_del_device()
      result = receive_message(Del_device_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'del_device failed: unknown result')
    end

    def alter_node(node_name, ipl, status)
      send_alter_node(node_name, ipl, status)
      return recv_alter_node()
    end

    def send_alter_node(node_name, ipl, status)
      send_message('alter_node', Alter_node_args, :node_name => node_name, :ipl => ipl, :status => status)
    end

    def recv_alter_node()
      result = receive_message(Alter_node_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'alter_node failed: unknown result')
    end

    def find_best_nodes(nr)
      send_find_best_nodes(nr)
      return recv_find_best_nodes()
    end

    def send_find_best_nodes(nr)
      send_message('find_best_nodes', Find_best_nodes_args, :nr => nr)
    end

    def recv_find_best_nodes()
      result = receive_message(Find_best_nodes_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find_best_nodes failed: unknown result')
    end

    def get_all_nodes()
      send_get_all_nodes()
      return recv_get_all_nodes()
    end

    def send_get_all_nodes()
      send_message('get_all_nodes', Get_all_nodes_args)
    end

    def recv_get_all_nodes()
      result = receive_message(Get_all_nodes_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_nodes failed: unknown result')
    end

    def getDMStatus()
      send_getDMStatus()
      return recv_getDMStatus()
    end

    def send_getDMStatus()
      send_message('getDMStatus', GetDMStatus_args)
    end

    def recv_getDMStatus()
      result = receive_message(GetDMStatus_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDMStatus failed: unknown result')
    end

    def migrate_in(tbl, parts, from_dc)
      send_migrate_in(tbl, parts, from_dc)
      return recv_migrate_in()
    end

    def send_migrate_in(tbl, parts, from_dc)
      send_message('migrate_in', Migrate_in_args, :tbl => tbl, :parts => parts, :from_dc => from_dc)
    end

    def recv_migrate_in()
      result = receive_message(Migrate_in_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'migrate_in failed: unknown result')
    end

    def migrate2_in(tbl, parts, idxs, from_dc, to_nas_devid, fileMap)
      send_migrate2_in(tbl, parts, idxs, from_dc, to_nas_devid, fileMap)
      return recv_migrate2_in()
    end

    def send_migrate2_in(tbl, parts, idxs, from_dc, to_nas_devid, fileMap)
      send_message('migrate2_in', Migrate2_in_args, :tbl => tbl, :parts => parts, :idxs => idxs, :from_dc => from_dc, :to_nas_devid => to_nas_devid, :fileMap => fileMap)
    end

    def recv_migrate2_in()
      result = receive_message(Migrate2_in_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'migrate2_in failed: unknown result')
    end

    def migrate_out(dbName, tableName, partNames, to_dc)
      send_migrate_out(dbName, tableName, partNames, to_dc)
      return recv_migrate_out()
    end

    def send_migrate_out(dbName, tableName, partNames, to_dc)
      send_message('migrate_out', Migrate_out_args, :dbName => dbName, :tableName => tableName, :partNames => partNames, :to_dc => to_dc)
    end

    def recv_migrate_out()
      result = receive_message(Migrate_out_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'migrate_out failed: unknown result')
    end

    def migrate2_stage1(dbName, tableName, partNames, to_dc)
      send_migrate2_stage1(dbName, tableName, partNames, to_dc)
      return recv_migrate2_stage1()
    end

    def send_migrate2_stage1(dbName, tableName, partNames, to_dc)
      send_message('migrate2_stage1', Migrate2_stage1_args, :dbName => dbName, :tableName => tableName, :partNames => partNames, :to_dc => to_dc)
    end

    def recv_migrate2_stage1()
      result = receive_message(Migrate2_stage1_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'migrate2_stage1 failed: unknown result')
    end

    def migrate2_stage2(dbName, tableName, partNames, to_dc, to_db, to_nas_devid)
      send_migrate2_stage2(dbName, tableName, partNames, to_dc, to_db, to_nas_devid)
      return recv_migrate2_stage2()
    end

    def send_migrate2_stage2(dbName, tableName, partNames, to_dc, to_db, to_nas_devid)
      send_message('migrate2_stage2', Migrate2_stage2_args, :dbName => dbName, :tableName => tableName, :partNames => partNames, :to_dc => to_dc, :to_db => to_db, :to_nas_devid => to_nas_devid)
    end

    def recv_migrate2_stage2()
      result = receive_message(Migrate2_stage2_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'migrate2_stage2 failed: unknown result')
    end

    def getMP(node_name, devid)
      send_getMP(node_name, devid)
      return recv_getMP()
    end

    def send_getMP(node_name, devid)
      send_message('getMP', GetMP_args, :node_name => node_name, :devid => devid)
    end

    def recv_getMP()
      result = receive_message(GetMP_result)
      return result.success unless result.success.nil?
      raise result.o1 unless result.o1.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMP failed: unknown result')
    end

  end

  class Processor < ::FacebookService::Processor 
    include ::Thrift::Processor

    def process_create_datacenter(seqid, iprot, oprot)
      args = read_args(iprot, Create_datacenter_args)
      result = Create_datacenter_result.new()
      begin
        @handler.create_datacenter(args.datacenter)
      rescue ::AlreadyExistsException => o1
        result.o1 = o1
      rescue ::InvalidObjectException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'create_datacenter', seqid)
    end

    def process_get_center(seqid, iprot, oprot)
      args = read_args(iprot, Get_center_args)
      result = Get_center_result.new()
      begin
        result.success = @handler.get_center(args.name)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_center', seqid)
    end

    def process_drop_center(seqid, iprot, oprot)
      args = read_args(iprot, Drop_center_args)
      result = Drop_center_result.new()
      begin
        @handler.drop_center(args.name, args.deleteData, args.cascade)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::InvalidOperationException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'drop_center', seqid)
    end

    def process_update_center(seqid, iprot, oprot)
      args = read_args(iprot, Update_center_args)
      result = Update_center_result.new()
      begin
        @handler.update_center(args.datacenter)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::InvalidOperationException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'update_center', seqid)
    end

    def process_get_all_centers(seqid, iprot, oprot)
      args = read_args(iprot, Get_all_centers_args)
      result = Get_all_centers_result.new()
      begin
        result.success = @handler.get_all_centers()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_all_centers', seqid)
    end

    def process_get_local_center(seqid, iprot, oprot)
      args = read_args(iprot, Get_local_center_args)
      result = Get_local_center_result.new()
      begin
        result.success = @handler.get_local_center()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_local_center', seqid)
    end

    def process_get_lucene_index_names(seqid, iprot, oprot)
      args = read_args(iprot, Get_lucene_index_names_args)
      result = Get_lucene_index_names_result.new()
      begin
        result.success = @handler.get_lucene_index_names(args.db_name, args.tbl_name, args.max_indexes)
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_lucene_index_names', seqid)
    end

    def process_get_all_busi_type_cols(seqid, iprot, oprot)
      args = read_args(iprot, Get_all_busi_type_cols_args)
      result = Get_all_busi_type_cols_result.new()
      begin
        result.success = @handler.get_all_busi_type_cols()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_all_busi_type_cols', seqid)
    end

    def process_get_all_busi_type_datacenters(seqid, iprot, oprot)
      args = read_args(iprot, Get_all_busi_type_datacenters_args)
      result = Get_all_busi_type_datacenters_result.new()
      begin
        result.success = @handler.get_all_busi_type_datacenters()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_all_busi_type_datacenters', seqid)
    end

    def process_append_busi_type_datacenter(seqid, iprot, oprot)
      args = read_args(iprot, Append_busi_type_datacenter_args)
      result = Append_busi_type_datacenter_result.new()
      begin
        @handler.append_busi_type_datacenter(args.busiTypeDatacenter)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'append_busi_type_datacenter', seqid)
    end

    def process_add_datawarehouse_sql(seqid, iprot, oprot)
      args = read_args(iprot, Add_datawarehouse_sql_args)
      result = Add_datawarehouse_sql_result.new()
      begin
        result.success = @handler.add_datawarehouse_sql(args.dwNum, args.sql)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'add_datawarehouse_sql', seqid)
    end

    def process_showBusitypes(seqid, iprot, oprot)
      args = read_args(iprot, ShowBusitypes_args)
      result = ShowBusitypes_result.new()
      begin
        result.success = @handler.showBusitypes()
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'showBusitypes', seqid)
    end

    def process_createBusitype(seqid, iprot, oprot)
      args = read_args(iprot, CreateBusitype_args)
      result = CreateBusitype_result.new()
      begin
        result.success = @handler.createBusitype(args.busitype)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'createBusitype', seqid)
    end

    def process_add_partition_files(seqid, iprot, oprot)
      args = read_args(iprot, Add_partition_files_args)
      result = Add_partition_files_result.new()
      result.success = @handler.add_partition_files(args.part, args.files)
      write_result(result, oprot, 'add_partition_files', seqid)
    end

    def process_drop_partition_files(seqid, iprot, oprot)
      args = read_args(iprot, Drop_partition_files_args)
      result = Drop_partition_files_result.new()
      result.success = @handler.drop_partition_files(args.part, args.files)
      write_result(result, oprot, 'drop_partition_files', seqid)
    end

    def process_add_subpartition_files(seqid, iprot, oprot)
      args = read_args(iprot, Add_subpartition_files_args)
      result = Add_subpartition_files_result.new()
      result.success = @handler.add_subpartition_files(args.subpart, args.files)
      write_result(result, oprot, 'add_subpartition_files', seqid)
    end

    def process_drop_subpartition_files(seqid, iprot, oprot)
      args = read_args(iprot, Drop_subpartition_files_args)
      result = Drop_subpartition_files_result.new()
      result.success = @handler.drop_subpartition_files(args.subpart, args.files)
      write_result(result, oprot, 'drop_subpartition_files', seqid)
    end

    def process_add_partition_index(seqid, iprot, oprot)
      args = read_args(iprot, Add_partition_index_args)
      result = Add_partition_index_result.new()
      begin
        result.success = @handler.add_partition_index(args.index, args.part)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'add_partition_index', seqid)
    end

    def process_drop_partition_index(seqid, iprot, oprot)
      args = read_args(iprot, Drop_partition_index_args)
      result = Drop_partition_index_result.new()
      begin
        result.success = @handler.drop_partition_index(args.index, args.part)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'drop_partition_index', seqid)
    end

    def process_add_subpartition_index(seqid, iprot, oprot)
      args = read_args(iprot, Add_subpartition_index_args)
      result = Add_subpartition_index_result.new()
      begin
        result.success = @handler.add_subpartition_index(args.index, args.part)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'add_subpartition_index', seqid)
    end

    def process_drop_subpartition_index(seqid, iprot, oprot)
      args = read_args(iprot, Drop_subpartition_index_args)
      result = Drop_subpartition_index_result.new()
      begin
        result.success = @handler.drop_subpartition_index(args.index, args.part)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'drop_subpartition_index', seqid)
    end

    def process_add_subpartition(seqid, iprot, oprot)
      args = read_args(iprot, Add_subpartition_args)
      result = Add_subpartition_result.new()
      result.success = @handler.add_subpartition(args.dbname, args.tbl_name, args.part_vals, args.sub_part)
      write_result(result, oprot, 'add_subpartition', seqid)
    end

    def process_get_subpartitions(seqid, iprot, oprot)
      args = read_args(iprot, Get_subpartitions_args)
      result = Get_subpartitions_result.new()
      result.success = @handler.get_subpartitions(args.dbname, args.tbl_name, args.part)
      write_result(result, oprot, 'get_subpartitions', seqid)
    end

    def process_add_partition_index_files(seqid, iprot, oprot)
      args = read_args(iprot, Add_partition_index_files_args)
      result = Add_partition_index_files_result.new()
      begin
        result.success = @handler.add_partition_index_files(args.index, args.part, args.file, args.originfid)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'add_partition_index_files', seqid)
    end

    def process_get_partition_index_files(seqid, iprot, oprot)
      args = read_args(iprot, Get_partition_index_files_args)
      result = Get_partition_index_files_result.new()
      begin
        result.success = @handler.get_partition_index_files(args.index, args.part)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_partition_index_files', seqid)
    end

    def process_drop_partition_index_files(seqid, iprot, oprot)
      args = read_args(iprot, Drop_partition_index_files_args)
      result = Drop_partition_index_files_result.new()
      begin
        result.success = @handler.drop_partition_index_files(args.index, args.part, args.file)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'drop_partition_index_files', seqid)
    end

    def process_add_subpartition_index_files(seqid, iprot, oprot)
      args = read_args(iprot, Add_subpartition_index_files_args)
      result = Add_subpartition_index_files_result.new()
      begin
        result.success = @handler.add_subpartition_index_files(args.index, args.subpart, args.file, args.originfid)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'add_subpartition_index_files', seqid)
    end

    def process_get_subpartition_index_files(seqid, iprot, oprot)
      args = read_args(iprot, Get_subpartition_index_files_args)
      result = Get_subpartition_index_files_result.new()
      begin
        result.success = @handler.get_subpartition_index_files(args.index, args.subpart)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_subpartition_index_files', seqid)
    end

    def process_drop_subpartition_index_files(seqid, iprot, oprot)
      args = read_args(iprot, Drop_subpartition_index_files_args)
      result = Drop_subpartition_index_files_result.new()
      begin
        result.success = @handler.drop_subpartition_index_files(args.index, args.subpart, args.file)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'drop_subpartition_index_files', seqid)
    end

    def process_create_database(seqid, iprot, oprot)
      args = read_args(iprot, Create_database_args)
      result = Create_database_result.new()
      begin
        @handler.create_database(args.database)
      rescue ::AlreadyExistsException => o1
        result.o1 = o1
      rescue ::InvalidObjectException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'create_database', seqid)
    end

    def process_get_database(seqid, iprot, oprot)
      args = read_args(iprot, Get_database_args)
      result = Get_database_result.new()
      begin
        result.success = @handler.get_database(args.name)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_database', seqid)
    end

    def process_drop_database(seqid, iprot, oprot)
      args = read_args(iprot, Drop_database_args)
      result = Drop_database_result.new()
      begin
        @handler.drop_database(args.name, args.deleteData, args.cascade)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::InvalidOperationException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'drop_database', seqid)
    end

    def process_get_databases(seqid, iprot, oprot)
      args = read_args(iprot, Get_databases_args)
      result = Get_databases_result.new()
      begin
        result.success = @handler.get_databases(args.pattern)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_databases', seqid)
    end

    def process_get_all_databases(seqid, iprot, oprot)
      args = read_args(iprot, Get_all_databases_args)
      result = Get_all_databases_result.new()
      begin
        result.success = @handler.get_all_databases()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_all_databases', seqid)
    end

    def process_alter_database(seqid, iprot, oprot)
      args = read_args(iprot, Alter_database_args)
      result = Alter_database_result.new()
      begin
        @handler.alter_database(args.dbname, args.db)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'alter_database', seqid)
    end

    def process_get_type(seqid, iprot, oprot)
      args = read_args(iprot, Get_type_args)
      result = Get_type_result.new()
      begin
        result.success = @handler.get_type(args.name)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_type', seqid)
    end

    def process_create_type(seqid, iprot, oprot)
      args = read_args(iprot, Create_type_args)
      result = Create_type_result.new()
      begin
        result.success = @handler.create_type(args.type)
      rescue ::AlreadyExistsException => o1
        result.o1 = o1
      rescue ::InvalidObjectException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'create_type', seqid)
    end

    def process_drop_type(seqid, iprot, oprot)
      args = read_args(iprot, Drop_type_args)
      result = Drop_type_result.new()
      begin
        result.success = @handler.drop_type(args.type)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'drop_type', seqid)
    end

    def process_get_type_all(seqid, iprot, oprot)
      args = read_args(iprot, Get_type_all_args)
      result = Get_type_all_result.new()
      begin
        result.success = @handler.get_type_all(args.name)
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_type_all', seqid)
    end

    def process_get_fields(seqid, iprot, oprot)
      args = read_args(iprot, Get_fields_args)
      result = Get_fields_result.new()
      begin
        result.success = @handler.get_fields(args.db_name, args.table_name)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::UnknownTableException => o2
        result.o2 = o2
      rescue ::UnknownDBException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'get_fields', seqid)
    end

    def process_get_schema(seqid, iprot, oprot)
      args = read_args(iprot, Get_schema_args)
      result = Get_schema_result.new()
      begin
        result.success = @handler.get_schema(args.db_name, args.table_name)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::UnknownTableException => o2
        result.o2 = o2
      rescue ::UnknownDBException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'get_schema', seqid)
    end

    def process_create_table(seqid, iprot, oprot)
      args = read_args(iprot, Create_table_args)
      result = Create_table_result.new()
      begin
        @handler.create_table(args.tbl)
      rescue ::AlreadyExistsException => o1
        result.o1 = o1
      rescue ::InvalidObjectException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      rescue ::NoSuchObjectException => o4
        result.o4 = o4
      end
      write_result(result, oprot, 'create_table', seqid)
    end

    def process_create_table_with_environment_context(seqid, iprot, oprot)
      args = read_args(iprot, Create_table_with_environment_context_args)
      result = Create_table_with_environment_context_result.new()
      begin
        @handler.create_table_with_environment_context(args.tbl, args.environment_context)
      rescue ::AlreadyExistsException => o1
        result.o1 = o1
      rescue ::InvalidObjectException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      rescue ::NoSuchObjectException => o4
        result.o4 = o4
      end
      write_result(result, oprot, 'create_table_with_environment_context', seqid)
    end

    def process_drop_table(seqid, iprot, oprot)
      args = read_args(iprot, Drop_table_args)
      result = Drop_table_result.new()
      begin
        @handler.drop_table(args.dbname, args.name, args.deleteData)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'drop_table', seqid)
    end

    def process_get_tables(seqid, iprot, oprot)
      args = read_args(iprot, Get_tables_args)
      result = Get_tables_result.new()
      begin
        result.success = @handler.get_tables(args.db_name, args.pattern)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_tables', seqid)
    end

    def process_get_all_tables(seqid, iprot, oprot)
      args = read_args(iprot, Get_all_tables_args)
      result = Get_all_tables_result.new()
      begin
        result.success = @handler.get_all_tables(args.db_name)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_all_tables', seqid)
    end

    def process_get_table(seqid, iprot, oprot)
      args = read_args(iprot, Get_table_args)
      result = Get_table_result.new()
      begin
        result.success = @handler.get_table(args.dbname, args.tbl_name)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_table', seqid)
    end

    def process_get_table_objects_by_name(seqid, iprot, oprot)
      args = read_args(iprot, Get_table_objects_by_name_args)
      result = Get_table_objects_by_name_result.new()
      begin
        result.success = @handler.get_table_objects_by_name(args.dbname, args.tbl_names)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::InvalidOperationException => o2
        result.o2 = o2
      rescue ::UnknownDBException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'get_table_objects_by_name', seqid)
    end

    def process_get_table_names_by_filter(seqid, iprot, oprot)
      args = read_args(iprot, Get_table_names_by_filter_args)
      result = Get_table_names_by_filter_result.new()
      begin
        result.success = @handler.get_table_names_by_filter(args.dbname, args.filter, args.max_tables)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::InvalidOperationException => o2
        result.o2 = o2
      rescue ::UnknownDBException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'get_table_names_by_filter', seqid)
    end

    def process_alter_table(seqid, iprot, oprot)
      args = read_args(iprot, Alter_table_args)
      result = Alter_table_result.new()
      begin
        @handler.alter_table(args.dbname, args.tbl_name, args.new_tbl)
      rescue ::InvalidOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'alter_table', seqid)
    end

    def process_alter_table_with_environment_context(seqid, iprot, oprot)
      args = read_args(iprot, Alter_table_with_environment_context_args)
      result = Alter_table_with_environment_context_result.new()
      begin
        @handler.alter_table_with_environment_context(args.dbname, args.tbl_name, args.new_tbl, args.environment_context)
      rescue ::InvalidOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'alter_table_with_environment_context', seqid)
    end

    def process_add_partition(seqid, iprot, oprot)
      args = read_args(iprot, Add_partition_args)
      result = Add_partition_result.new()
      begin
        result.success = @handler.add_partition(args.new_part)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'add_partition', seqid)
    end

    def process_add_partition_with_environment_context(seqid, iprot, oprot)
      args = read_args(iprot, Add_partition_with_environment_context_args)
      result = Add_partition_with_environment_context_result.new()
      begin
        result.success = @handler.add_partition_with_environment_context(args.new_part, args.environment_context)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'add_partition_with_environment_context', seqid)
    end

    def process_add_partitions(seqid, iprot, oprot)
      args = read_args(iprot, Add_partitions_args)
      result = Add_partitions_result.new()
      begin
        result.success = @handler.add_partitions(args.new_parts)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'add_partitions', seqid)
    end

    def process_append_partition(seqid, iprot, oprot)
      args = read_args(iprot, Append_partition_args)
      result = Append_partition_result.new()
      begin
        result.success = @handler.append_partition(args.db_name, args.tbl_name, args.part_vals)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'append_partition', seqid)
    end

    def process_append_partition_by_name(seqid, iprot, oprot)
      args = read_args(iprot, Append_partition_by_name_args)
      result = Append_partition_by_name_result.new()
      begin
        result.success = @handler.append_partition_by_name(args.db_name, args.tbl_name, args.part_name)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'append_partition_by_name', seqid)
    end

    def process_drop_partition(seqid, iprot, oprot)
      args = read_args(iprot, Drop_partition_args)
      result = Drop_partition_result.new()
      begin
        result.success = @handler.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'drop_partition', seqid)
    end

    def process_drop_partition_by_name(seqid, iprot, oprot)
      args = read_args(iprot, Drop_partition_by_name_args)
      result = Drop_partition_by_name_result.new()
      begin
        result.success = @handler.drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'drop_partition_by_name', seqid)
    end

    def process_get_partition(seqid, iprot, oprot)
      args = read_args(iprot, Get_partition_args)
      result = Get_partition_result.new()
      begin
        result.success = @handler.get_partition(args.db_name, args.tbl_name, args.part_vals)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partition', seqid)
    end

    def process_get_partition_with_auth(seqid, iprot, oprot)
      args = read_args(iprot, Get_partition_with_auth_args)
      result = Get_partition_with_auth_result.new()
      begin
        result.success = @handler.get_partition_with_auth(args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partition_with_auth', seqid)
    end

    def process_get_partition_by_name(seqid, iprot, oprot)
      args = read_args(iprot, Get_partition_by_name_args)
      result = Get_partition_by_name_result.new()
      begin
        result.success = @handler.get_partition_by_name(args.db_name, args.tbl_name, args.part_name)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partition_by_name', seqid)
    end

    def process_get_partitions(seqid, iprot, oprot)
      args = read_args(iprot, Get_partitions_args)
      result = Get_partitions_result.new()
      begin
        result.success = @handler.get_partitions(args.db_name, args.tbl_name, args.max_parts)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partitions', seqid)
    end

    def process_get_partitions_with_auth(seqid, iprot, oprot)
      args = read_args(iprot, Get_partitions_with_auth_args)
      result = Get_partitions_with_auth_result.new()
      begin
        result.success = @handler.get_partitions_with_auth(args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partitions_with_auth', seqid)
    end

    def process_get_partition_names(seqid, iprot, oprot)
      args = read_args(iprot, Get_partition_names_args)
      result = Get_partition_names_result.new()
      begin
        result.success = @handler.get_partition_names(args.db_name, args.tbl_name, args.max_parts)
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partition_names', seqid)
    end

    def process_get_partitions_ps(seqid, iprot, oprot)
      args = read_args(iprot, Get_partitions_ps_args)
      result = Get_partitions_ps_result.new()
      begin
        result.success = @handler.get_partitions_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partitions_ps', seqid)
    end

    def process_get_partitions_ps_with_auth(seqid, iprot, oprot)
      args = read_args(iprot, Get_partitions_ps_with_auth_args)
      result = Get_partitions_ps_with_auth_result.new()
      begin
        result.success = @handler.get_partitions_ps_with_auth(args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partitions_ps_with_auth', seqid)
    end

    def process_get_partition_names_ps(seqid, iprot, oprot)
      args = read_args(iprot, Get_partition_names_ps_args)
      result = Get_partition_names_ps_result.new()
      begin
        result.success = @handler.get_partition_names_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partition_names_ps', seqid)
    end

    def process_get_partitions_by_filter(seqid, iprot, oprot)
      args = read_args(iprot, Get_partitions_by_filter_args)
      result = Get_partitions_by_filter_result.new()
      begin
        result.success = @handler.get_partitions_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partitions_by_filter', seqid)
    end

    def process_get_partitions_by_names(seqid, iprot, oprot)
      args = read_args(iprot, Get_partitions_by_names_args)
      result = Get_partitions_by_names_result.new()
      begin
        result.success = @handler.get_partitions_by_names(args.db_name, args.tbl_name, args.names)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_partitions_by_names', seqid)
    end

    def process_alter_partition(seqid, iprot, oprot)
      args = read_args(iprot, Alter_partition_args)
      result = Alter_partition_result.new()
      begin
        @handler.alter_partition(args.db_name, args.tbl_name, args.new_part)
      rescue ::InvalidOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'alter_partition', seqid)
    end

    def process_alter_partitions(seqid, iprot, oprot)
      args = read_args(iprot, Alter_partitions_args)
      result = Alter_partitions_result.new()
      begin
        @handler.alter_partitions(args.db_name, args.tbl_name, args.new_parts)
      rescue ::InvalidOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'alter_partitions', seqid)
    end

    def process_alter_partition_with_environment_context(seqid, iprot, oprot)
      args = read_args(iprot, Alter_partition_with_environment_context_args)
      result = Alter_partition_with_environment_context_result.new()
      begin
        @handler.alter_partition_with_environment_context(args.db_name, args.tbl_name, args.new_part, args.environment_context)
      rescue ::InvalidOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'alter_partition_with_environment_context', seqid)
    end

    def process_rename_partition(seqid, iprot, oprot)
      args = read_args(iprot, Rename_partition_args)
      result = Rename_partition_result.new()
      begin
        @handler.rename_partition(args.db_name, args.tbl_name, args.part_vals, args.new_part)
      rescue ::InvalidOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'rename_partition', seqid)
    end

    def process_get_config_value(seqid, iprot, oprot)
      args = read_args(iprot, Get_config_value_args)
      result = Get_config_value_result.new()
      begin
        result.success = @handler.get_config_value(args.name, args.defaultValue)
      rescue ::ConfigValSecurityException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_config_value', seqid)
    end

    def process_partition_name_to_vals(seqid, iprot, oprot)
      args = read_args(iprot, Partition_name_to_vals_args)
      result = Partition_name_to_vals_result.new()
      begin
        result.success = @handler.partition_name_to_vals(args.part_name)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'partition_name_to_vals', seqid)
    end

    def process_partition_name_to_spec(seqid, iprot, oprot)
      args = read_args(iprot, Partition_name_to_spec_args)
      result = Partition_name_to_spec_result.new()
      begin
        result.success = @handler.partition_name_to_spec(args.part_name)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'partition_name_to_spec', seqid)
    end

    def process_markPartitionForEvent(seqid, iprot, oprot)
      args = read_args(iprot, MarkPartitionForEvent_args)
      result = MarkPartitionForEvent_result.new()
      begin
        @handler.markPartitionForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      rescue ::UnknownDBException => o3
        result.o3 = o3
      rescue ::UnknownTableException => o4
        result.o4 = o4
      rescue ::UnknownPartitionException => o5
        result.o5 = o5
      rescue ::InvalidPartitionException => o6
        result.o6 = o6
      end
      write_result(result, oprot, 'markPartitionForEvent', seqid)
    end

    def process_isPartitionMarkedForEvent(seqid, iprot, oprot)
      args = read_args(iprot, IsPartitionMarkedForEvent_args)
      result = IsPartitionMarkedForEvent_result.new()
      begin
        result.success = @handler.isPartitionMarkedForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      rescue ::UnknownDBException => o3
        result.o3 = o3
      rescue ::UnknownTableException => o4
        result.o4 = o4
      rescue ::UnknownPartitionException => o5
        result.o5 = o5
      rescue ::InvalidPartitionException => o6
        result.o6 = o6
      end
      write_result(result, oprot, 'isPartitionMarkedForEvent', seqid)
    end

    def process_add_index(seqid, iprot, oprot)
      args = read_args(iprot, Add_index_args)
      result = Add_index_result.new()
      begin
        result.success = @handler.add_index(args.new_index, args.index_table)
      rescue ::InvalidObjectException => o1
        result.o1 = o1
      rescue ::AlreadyExistsException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      end
      write_result(result, oprot, 'add_index', seqid)
    end

    def process_alter_index(seqid, iprot, oprot)
      args = read_args(iprot, Alter_index_args)
      result = Alter_index_result.new()
      begin
        @handler.alter_index(args.dbname, args.base_tbl_name, args.idx_name, args.new_idx)
      rescue ::InvalidOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'alter_index', seqid)
    end

    def process_drop_index_by_name(seqid, iprot, oprot)
      args = read_args(iprot, Drop_index_by_name_args)
      result = Drop_index_by_name_result.new()
      begin
        result.success = @handler.drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'drop_index_by_name', seqid)
    end

    def process_get_index_by_name(seqid, iprot, oprot)
      args = read_args(iprot, Get_index_by_name_args)
      result = Get_index_by_name_result.new()
      begin
        result.success = @handler.get_index_by_name(args.db_name, args.tbl_name, args.index_name)
      rescue ::MetaException => o1
        result.o1 = o1
      rescue ::NoSuchObjectException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_index_by_name', seqid)
    end

    def process_get_indexes(seqid, iprot, oprot)
      args = read_args(iprot, Get_indexes_args)
      result = Get_indexes_result.new()
      begin
        result.success = @handler.get_indexes(args.db_name, args.tbl_name, args.max_indexes)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_indexes', seqid)
    end

    def process_get_index_names(seqid, iprot, oprot)
      args = read_args(iprot, Get_index_names_args)
      result = Get_index_names_result.new()
      begin
        result.success = @handler.get_index_names(args.db_name, args.tbl_name, args.max_indexes)
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_index_names', seqid)
    end

    def process_update_table_column_statistics(seqid, iprot, oprot)
      args = read_args(iprot, Update_table_column_statistics_args)
      result = Update_table_column_statistics_result.new()
      begin
        result.success = @handler.update_table_column_statistics(args.stats_obj)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::InvalidObjectException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      rescue ::InvalidInputException => o4
        result.o4 = o4
      end
      write_result(result, oprot, 'update_table_column_statistics', seqid)
    end

    def process_update_partition_column_statistics(seqid, iprot, oprot)
      args = read_args(iprot, Update_partition_column_statistics_args)
      result = Update_partition_column_statistics_result.new()
      begin
        result.success = @handler.update_partition_column_statistics(args.stats_obj)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::InvalidObjectException => o2
        result.o2 = o2
      rescue ::MetaException => o3
        result.o3 = o3
      rescue ::InvalidInputException => o4
        result.o4 = o4
      end
      write_result(result, oprot, 'update_partition_column_statistics', seqid)
    end

    def process_get_table_column_statistics(seqid, iprot, oprot)
      args = read_args(iprot, Get_table_column_statistics_args)
      result = Get_table_column_statistics_result.new()
      begin
        result.success = @handler.get_table_column_statistics(args.db_name, args.tbl_name, args.col_name)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      rescue ::InvalidInputException => o3
        result.o3 = o3
      rescue ::InvalidObjectException => o4
        result.o4 = o4
      end
      write_result(result, oprot, 'get_table_column_statistics', seqid)
    end

    def process_get_partition_column_statistics(seqid, iprot, oprot)
      args = read_args(iprot, Get_partition_column_statistics_args)
      result = Get_partition_column_statistics_result.new()
      begin
        result.success = @handler.get_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      rescue ::InvalidInputException => o3
        result.o3 = o3
      rescue ::InvalidObjectException => o4
        result.o4 = o4
      end
      write_result(result, oprot, 'get_partition_column_statistics', seqid)
    end

    def process_delete_partition_column_statistics(seqid, iprot, oprot)
      args = read_args(iprot, Delete_partition_column_statistics_args)
      result = Delete_partition_column_statistics_result.new()
      begin
        result.success = @handler.delete_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      rescue ::InvalidObjectException => o3
        result.o3 = o3
      rescue ::InvalidInputException => o4
        result.o4 = o4
      end
      write_result(result, oprot, 'delete_partition_column_statistics', seqid)
    end

    def process_delete_table_column_statistics(seqid, iprot, oprot)
      args = read_args(iprot, Delete_table_column_statistics_args)
      result = Delete_table_column_statistics_result.new()
      begin
        result.success = @handler.delete_table_column_statistics(args.db_name, args.tbl_name, args.col_name)
      rescue ::NoSuchObjectException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      rescue ::InvalidObjectException => o3
        result.o3 = o3
      rescue ::InvalidInputException => o4
        result.o4 = o4
      end
      write_result(result, oprot, 'delete_table_column_statistics', seqid)
    end

    def process_create_role(seqid, iprot, oprot)
      args = read_args(iprot, Create_role_args)
      result = Create_role_result.new()
      begin
        result.success = @handler.create_role(args.role)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'create_role', seqid)
    end

    def process_drop_role(seqid, iprot, oprot)
      args = read_args(iprot, Drop_role_args)
      result = Drop_role_result.new()
      begin
        result.success = @handler.drop_role(args.role_name)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'drop_role', seqid)
    end

    def process_get_role_names(seqid, iprot, oprot)
      args = read_args(iprot, Get_role_names_args)
      result = Get_role_names_result.new()
      begin
        result.success = @handler.get_role_names()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_role_names', seqid)
    end

    def process_grant_role(seqid, iprot, oprot)
      args = read_args(iprot, Grant_role_args)
      result = Grant_role_result.new()
      begin
        result.success = @handler.grant_role(args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'grant_role', seqid)
    end

    def process_revoke_role(seqid, iprot, oprot)
      args = read_args(iprot, Revoke_role_args)
      result = Revoke_role_result.new()
      begin
        result.success = @handler.revoke_role(args.role_name, args.principal_name, args.principal_type)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'revoke_role', seqid)
    end

    def process_list_roles(seqid, iprot, oprot)
      args = read_args(iprot, List_roles_args)
      result = List_roles_result.new()
      begin
        result.success = @handler.list_roles(args.principal_name, args.principal_type)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'list_roles', seqid)
    end

    def process_get_privilege_set(seqid, iprot, oprot)
      args = read_args(iprot, Get_privilege_set_args)
      result = Get_privilege_set_result.new()
      begin
        result.success = @handler.get_privilege_set(args.hiveObject, args.user_name, args.group_names)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_privilege_set', seqid)
    end

    def process_list_privileges(seqid, iprot, oprot)
      args = read_args(iprot, List_privileges_args)
      result = List_privileges_result.new()
      begin
        result.success = @handler.list_privileges(args.principal_name, args.principal_type, args.hiveObject)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'list_privileges', seqid)
    end

    def process_grant_privileges(seqid, iprot, oprot)
      args = read_args(iprot, Grant_privileges_args)
      result = Grant_privileges_result.new()
      begin
        result.success = @handler.grant_privileges(args.privileges)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'grant_privileges', seqid)
    end

    def process_revoke_privileges(seqid, iprot, oprot)
      args = read_args(iprot, Revoke_privileges_args)
      result = Revoke_privileges_result.new()
      begin
        result.success = @handler.revoke_privileges(args.privileges)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'revoke_privileges', seqid)
    end

    def process_set_ugi(seqid, iprot, oprot)
      args = read_args(iprot, Set_ugi_args)
      result = Set_ugi_result.new()
      begin
        result.success = @handler.set_ugi(args.user_name, args.group_names)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'set_ugi', seqid)
    end

    def process_get_delegation_token(seqid, iprot, oprot)
      args = read_args(iprot, Get_delegation_token_args)
      result = Get_delegation_token_result.new()
      begin
        result.success = @handler.get_delegation_token(args.token_owner, args.renewer_kerberos_principal_name)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_delegation_token', seqid)
    end

    def process_renew_delegation_token(seqid, iprot, oprot)
      args = read_args(iprot, Renew_delegation_token_args)
      result = Renew_delegation_token_result.new()
      begin
        result.success = @handler.renew_delegation_token(args.token_str_form)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'renew_delegation_token', seqid)
    end

    def process_cancel_delegation_token(seqid, iprot, oprot)
      args = read_args(iprot, Cancel_delegation_token_args)
      result = Cancel_delegation_token_result.new()
      begin
        @handler.cancel_delegation_token(args.token_str_form)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'cancel_delegation_token', seqid)
    end

    def process_create_file(seqid, iprot, oprot)
      args = read_args(iprot, Create_file_args)
      result = Create_file_result.new()
      begin
        result.success = @handler.create_file(args.node_name, args.repnr, args.db_name, args.table_name)
      rescue ::FileOperationException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'create_file', seqid)
    end

    def process_close_file(seqid, iprot, oprot)
      args = read_args(iprot, Close_file_args)
      result = Close_file_result.new()
      begin
        result.success = @handler.close_file(args.file)
      rescue ::FileOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'close_file', seqid)
    end

    def process_online_filelocation(seqid, iprot, oprot)
      args = read_args(iprot, Online_filelocation_args)
      result = Online_filelocation_result.new()
      begin
        result.success = @handler.online_filelocation(args.file)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'online_filelocation', seqid)
    end

    def process_toggle_safemode(seqid, iprot, oprot)
      args = read_args(iprot, Toggle_safemode_args)
      result = Toggle_safemode_result.new()
      begin
        result.success = @handler.toggle_safemode()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'toggle_safemode', seqid)
    end

    def process_get_file_by_id(seqid, iprot, oprot)
      args = read_args(iprot, Get_file_by_id_args)
      result = Get_file_by_id_result.new()
      begin
        result.success = @handler.get_file_by_id(args.fid)
      rescue ::FileOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_file_by_id', seqid)
    end

    def process_get_file_by_name(seqid, iprot, oprot)
      args = read_args(iprot, Get_file_by_name_args)
      result = Get_file_by_name_result.new()
      begin
        result.success = @handler.get_file_by_name(args.node, args.devid, args.location)
      rescue ::FileOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'get_file_by_name', seqid)
    end

    def process_rm_file_logical(seqid, iprot, oprot)
      args = read_args(iprot, Rm_file_logical_args)
      result = Rm_file_logical_result.new()
      begin
        result.success = @handler.rm_file_logical(args.file)
      rescue ::FileOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'rm_file_logical', seqid)
    end

    def process_restore_file(seqid, iprot, oprot)
      args = read_args(iprot, Restore_file_args)
      result = Restore_file_result.new()
      begin
        result.success = @handler.restore_file(args.file)
      rescue ::FileOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'restore_file', seqid)
    end

    def process_rm_file_physical(seqid, iprot, oprot)
      args = read_args(iprot, Rm_file_physical_args)
      result = Rm_file_physical_result.new()
      begin
        result.success = @handler.rm_file_physical(args.file)
      rescue ::FileOperationException => o1
        result.o1 = o1
      rescue ::MetaException => o2
        result.o2 = o2
      end
      write_result(result, oprot, 'rm_file_physical', seqid)
    end

    def process_get_node(seqid, iprot, oprot)
      args = read_args(iprot, Get_node_args)
      result = Get_node_result.new()
      begin
        result.success = @handler.get_node(args.node_name)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_node', seqid)
    end

    def process_add_node(seqid, iprot, oprot)
      args = read_args(iprot, Add_node_args)
      result = Add_node_result.new()
      begin
        result.success = @handler.add_node(args.node_name, args.ipl)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'add_node', seqid)
    end

    def process_del_node(seqid, iprot, oprot)
      args = read_args(iprot, Del_node_args)
      result = Del_node_result.new()
      begin
        result.success = @handler.del_node(args.node_name)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'del_node', seqid)
    end

    def process_create_device(seqid, iprot, oprot)
      args = read_args(iprot, Create_device_args)
      result = Create_device_result.new()
      begin
        result.success = @handler.create_device(args.devid, args.prop, args.node_name)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'create_device', seqid)
    end

    def process_del_device(seqid, iprot, oprot)
      args = read_args(iprot, Del_device_args)
      result = Del_device_result.new()
      begin
        result.success = @handler.del_device(args.devid)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'del_device', seqid)
    end

    def process_alter_node(seqid, iprot, oprot)
      args = read_args(iprot, Alter_node_args)
      result = Alter_node_result.new()
      begin
        result.success = @handler.alter_node(args.node_name, args.ipl, args.status)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'alter_node', seqid)
    end

    def process_find_best_nodes(seqid, iprot, oprot)
      args = read_args(iprot, Find_best_nodes_args)
      result = Find_best_nodes_result.new()
      begin
        result.success = @handler.find_best_nodes(args.nr)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'find_best_nodes', seqid)
    end

    def process_get_all_nodes(seqid, iprot, oprot)
      args = read_args(iprot, Get_all_nodes_args)
      result = Get_all_nodes_result.new()
      begin
        result.success = @handler.get_all_nodes()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'get_all_nodes', seqid)
    end

    def process_getDMStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetDMStatus_args)
      result = GetDMStatus_result.new()
      begin
        result.success = @handler.getDMStatus()
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'getDMStatus', seqid)
    end

    def process_migrate_in(seqid, iprot, oprot)
      args = read_args(iprot, Migrate_in_args)
      result = Migrate_in_result.new()
      begin
        result.success = @handler.migrate_in(args.tbl, args.parts, args.from_dc)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'migrate_in', seqid)
    end

    def process_migrate2_in(seqid, iprot, oprot)
      args = read_args(iprot, Migrate2_in_args)
      result = Migrate2_in_result.new()
      begin
        result.success = @handler.migrate2_in(args.tbl, args.parts, args.idxs, args.from_dc, args.to_nas_devid, args.fileMap)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'migrate2_in', seqid)
    end

    def process_migrate_out(seqid, iprot, oprot)
      args = read_args(iprot, Migrate_out_args)
      result = Migrate_out_result.new()
      begin
        result.success = @handler.migrate_out(args.dbName, args.tableName, args.partNames, args.to_dc)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'migrate_out', seqid)
    end

    def process_migrate2_stage1(seqid, iprot, oprot)
      args = read_args(iprot, Migrate2_stage1_args)
      result = Migrate2_stage1_result.new()
      begin
        result.success = @handler.migrate2_stage1(args.dbName, args.tableName, args.partNames, args.to_dc)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'migrate2_stage1', seqid)
    end

    def process_migrate2_stage2(seqid, iprot, oprot)
      args = read_args(iprot, Migrate2_stage2_args)
      result = Migrate2_stage2_result.new()
      begin
        result.success = @handler.migrate2_stage2(args.dbName, args.tableName, args.partNames, args.to_dc, args.to_db, args.to_nas_devid)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'migrate2_stage2', seqid)
    end

    def process_getMP(seqid, iprot, oprot)
      args = read_args(iprot, GetMP_args)
      result = GetMP_result.new()
      begin
        result.success = @handler.getMP(args.node_name, args.devid)
      rescue ::MetaException => o1
        result.o1 = o1
      end
      write_result(result, oprot, 'getMP', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Create_datacenter_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DATACENTER = 1

    FIELDS = {
      DATACENTER => {:type => ::Thrift::Types::STRUCT, :name => 'datacenter', :class => ::Datacenter}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_datacenter_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::AlreadyExistsException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_center_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_center_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Datacenter},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_center_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1
    DELETEDATA = 2
    CASCADE = 3

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      DELETEDATA => {:type => ::Thrift::Types::BOOL, :name => 'deleteData'},
      CASCADE => {:type => ::Thrift::Types::BOOL, :name => 'cascade'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_center_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidOperationException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_center_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DATACENTER = 1

    FIELDS = {
      DATACENTER => {:type => ::Thrift::Types::STRUCT, :name => 'datacenter', :class => ::Datacenter}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_center_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidOperationException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_centers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_centers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Datacenter}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_local_center_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_local_center_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Datacenter},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_lucene_index_names_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    MAX_INDEXES = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      MAX_INDEXES => {:type => ::Thrift::Types::I16, :name => 'max_indexes', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_lucene_index_names_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O2 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_busi_type_cols_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_busi_type_cols_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::BusiTypeColumn}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_busi_type_datacenters_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_busi_type_datacenters_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::BusiTypeDatacenter}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Append_busi_type_datacenter_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUSITYPEDATACENTER = 1

    FIELDS = {
      BUSITYPEDATACENTER => {:type => ::Thrift::Types::STRUCT, :name => 'busiTypeDatacenter', :class => ::BusiTypeDatacenter}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Append_busi_type_datacenter_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_datawarehouse_sql_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DWNUM = 1
    SQL = 2

    FIELDS = {
      DWNUM => {:type => ::Thrift::Types::I32, :name => 'dwNum'},
      SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_datawarehouse_sql_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ShowBusitypes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ShowBusitypes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Busitype}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateBusitype_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BUSITYPE = 1

    FIELDS = {
      BUSITYPE => {:type => ::Thrift::Types::STRUCT, :name => 'busitype', :class => ::Busitype}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateBusitype_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PART = 1
    FILES = 2

    FIELDS = {
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Partition},
      FILES => {:type => ::Thrift::Types::LIST, :name => 'files', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PART = 1
    FILES = 2

    FIELDS = {
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Partition},
      FILES => {:type => ::Thrift::Types::LIST, :name => 'files', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_subpartition_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUBPART = 1
    FILES = 2

    FIELDS = {
      SUBPART => {:type => ::Thrift::Types::STRUCT, :name => 'subpart', :class => ::Subpartition},
      FILES => {:type => ::Thrift::Types::LIST, :name => 'files', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_subpartition_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_subpartition_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUBPART = 1
    FILES = 2

    FIELDS = {
      SUBPART => {:type => ::Thrift::Types::STRUCT, :name => 'subpart', :class => ::Subpartition},
      FILES => {:type => ::Thrift::Types::LIST, :name => 'files', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_subpartition_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    PART = 2

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Partition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    PART = 2

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Partition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_subpartition_index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    PART = 2

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Subpartition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_subpartition_index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_subpartition_index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    PART = 2

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Subpartition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_subpartition_index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_subpartition_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    SUB_PART = 4

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}},
      SUB_PART => {:type => ::Thrift::Types::STRUCT, :name => 'sub_part', :class => ::Subpartition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_subpartition_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_subpartitions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TBL_NAME = 2
    PART = 3

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Partition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_subpartitions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Subpartition}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_index_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    PART = 2
    FILE = 3
    ORIGINFID = 4

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Partition},
      FILE => {:type => ::Thrift::Types::LIST, :name => 'file', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}},
      ORIGINFID => {:type => ::Thrift::Types::LIST, :name => 'originfid', :element => {:type => ::Thrift::Types::I64}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_index_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_index_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    PART = 2

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Partition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_index_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFileRef}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_index_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    PART = 2
    FILE = 3

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      PART => {:type => ::Thrift::Types::STRUCT, :name => 'part', :class => ::Partition},
      FILE => {:type => ::Thrift::Types::LIST, :name => 'file', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_index_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_subpartition_index_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    SUBPART = 2
    FILE = 3
    ORIGINFID = 4

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      SUBPART => {:type => ::Thrift::Types::STRUCT, :name => 'subpart', :class => ::Subpartition},
      FILE => {:type => ::Thrift::Types::LIST, :name => 'file', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}},
      ORIGINFID => {:type => ::Thrift::Types::LIST, :name => 'originfid', :element => {:type => ::Thrift::Types::I64}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_subpartition_index_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_subpartition_index_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    SUBPART = 2

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      SUBPART => {:type => ::Thrift::Types::STRUCT, :name => 'subpart', :class => ::Subpartition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_subpartition_index_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFileRef}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_subpartition_index_files_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX = 1
    SUBPART = 2
    FILE = 3

    FIELDS = {
      INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'index', :class => ::Index},
      SUBPART => {:type => ::Thrift::Types::STRUCT, :name => 'subpart', :class => ::Subpartition},
      FILE => {:type => ::Thrift::Types::LIST, :name => 'file', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_subpartition_index_files_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_database_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DATABASE = 1

    FIELDS = {
      DATABASE => {:type => ::Thrift::Types::STRUCT, :name => 'database', :class => ::Database}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_database_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::AlreadyExistsException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_database_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_database_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Database},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_database_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1
    DELETEDATA = 2
    CASCADE = 3

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      DELETEDATA => {:type => ::Thrift::Types::BOOL, :name => 'deleteData'},
      CASCADE => {:type => ::Thrift::Types::BOOL, :name => 'cascade'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_database_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidOperationException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_databases_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PATTERN = 1

    FIELDS = {
      PATTERN => {:type => ::Thrift::Types::STRING, :name => 'pattern'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_databases_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_databases_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_databases_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_database_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    DB = 2

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      DB => {:type => ::Thrift::Types::STRUCT, :name => 'db', :class => ::Database}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_database_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_type_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_type_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Type},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_type_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TYPE = 1

    FIELDS = {
      TYPE => {:type => ::Thrift::Types::STRUCT, :name => 'type', :class => ::Type}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_type_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::AlreadyExistsException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_type_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TYPE = 1

    FIELDS = {
      TYPE => {:type => ::Thrift::Types::STRING, :name => 'type'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_type_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_type_all_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_type_all_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O2 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Type}},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_fields_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TABLE_NAME = 2

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_fields_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::UnknownTableException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::UnknownDBException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_schema_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TABLE_NAME = 2

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_schema_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::UnknownTableException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::UnknownDBException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_table_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TBL = 1

    FIELDS = {
      TBL => {:type => ::Thrift::Types::STRUCT, :name => 'tbl', :class => ::Table}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_table_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::AlreadyExistsException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_table_with_environment_context_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TBL = 1
    ENVIRONMENT_CONTEXT = 2

    FIELDS = {
      TBL => {:type => ::Thrift::Types::STRUCT, :name => 'tbl', :class => ::Table},
      ENVIRONMENT_CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'environment_context', :class => ::EnvironmentContext}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_table_with_environment_context_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::AlreadyExistsException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_table_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    NAME = 2
    DELETEDATA = 3

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      DELETEDATA => {:type => ::Thrift::Types::BOOL, :name => 'deleteData'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_table_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O3 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_tables_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    PATTERN = 2

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      PATTERN => {:type => ::Thrift::Types::STRING, :name => 'pattern'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_tables_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_tables_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_tables_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_table_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TBL_NAME = 2

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_table_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Table},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_table_objects_by_name_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TBL_NAMES = 2

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      TBL_NAMES => {:type => ::Thrift::Types::LIST, :name => 'tbl_names', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_table_objects_by_name_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Table}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidOperationException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::UnknownDBException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_table_names_by_filter_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    FILTER = 2
    MAX_TABLES = 3

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      FILTER => {:type => ::Thrift::Types::STRING, :name => 'filter'},
      MAX_TABLES => {:type => ::Thrift::Types::I16, :name => 'max_tables', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_table_names_by_filter_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidOperationException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::UnknownDBException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_table_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TBL_NAME = 2
    NEW_TBL = 3

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      NEW_TBL => {:type => ::Thrift::Types::STRUCT, :name => 'new_tbl', :class => ::Table}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_table_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_table_with_environment_context_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TBL_NAME = 2
    NEW_TBL = 3
    ENVIRONMENT_CONTEXT = 4

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      NEW_TBL => {:type => ::Thrift::Types::STRUCT, :name => 'new_tbl', :class => ::Table},
      ENVIRONMENT_CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'environment_context', :class => ::EnvironmentContext}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_table_with_environment_context_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NEW_PART = 1

    FIELDS = {
      NEW_PART => {:type => ::Thrift::Types::STRUCT, :name => 'new_part', :class => ::Partition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Partition},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_with_environment_context_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NEW_PART = 1
    ENVIRONMENT_CONTEXT = 2

    FIELDS = {
      NEW_PART => {:type => ::Thrift::Types::STRUCT, :name => 'new_part', :class => ::Partition},
      ENVIRONMENT_CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'environment_context', :class => ::EnvironmentContext}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partition_with_environment_context_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Partition},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partitions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NEW_PARTS = 1

    FIELDS = {
      NEW_PARTS => {:type => ::Thrift::Types::LIST, :name => 'new_parts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_partitions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Append_partition_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Append_partition_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Partition},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Append_partition_by_name_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_NAME = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_NAME => {:type => ::Thrift::Types::STRING, :name => 'part_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Append_partition_by_name_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Partition},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    DELETEDATA = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}},
      DELETEDATA => {:type => ::Thrift::Types::BOOL, :name => 'deleteData'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_by_name_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_NAME = 3
    DELETEDATA = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_NAME => {:type => ::Thrift::Types::STRING, :name => 'part_name'},
      DELETEDATA => {:type => ::Thrift::Types::BOOL, :name => 'deleteData'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_partition_by_name_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Partition},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_with_auth_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    USER_NAME = 4
    GROUP_NAMES = 5

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}},
      USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
      GROUP_NAMES => {:type => ::Thrift::Types::LIST, :name => 'group_names', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_with_auth_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Partition},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_by_name_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_NAME = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_NAME => {:type => ::Thrift::Types::STRING, :name => 'part_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_by_name_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Partition},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    MAX_PARTS = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      MAX_PARTS => {:type => ::Thrift::Types::I16, :name => 'max_parts', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_with_auth_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    MAX_PARTS = 3
    USER_NAME = 4
    GROUP_NAMES = 5

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      MAX_PARTS => {:type => ::Thrift::Types::I16, :name => 'max_parts', :default => -1},
      USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
      GROUP_NAMES => {:type => ::Thrift::Types::LIST, :name => 'group_names', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_with_auth_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_names_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    MAX_PARTS = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      MAX_PARTS => {:type => ::Thrift::Types::I16, :name => 'max_parts', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_names_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O2 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_ps_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    MAX_PARTS = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}},
      MAX_PARTS => {:type => ::Thrift::Types::I16, :name => 'max_parts', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_ps_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_ps_with_auth_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    MAX_PARTS = 4
    USER_NAME = 5
    GROUP_NAMES = 6

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}},
      MAX_PARTS => {:type => ::Thrift::Types::I16, :name => 'max_parts', :default => -1},
      USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
      GROUP_NAMES => {:type => ::Thrift::Types::LIST, :name => 'group_names', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_ps_with_auth_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_names_ps_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    MAX_PARTS = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}},
      MAX_PARTS => {:type => ::Thrift::Types::I16, :name => 'max_parts', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_names_ps_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_by_filter_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    FILTER = 3
    MAX_PARTS = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      FILTER => {:type => ::Thrift::Types::STRING, :name => 'filter'},
      MAX_PARTS => {:type => ::Thrift::Types::I16, :name => 'max_parts', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_by_filter_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_by_names_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    NAMES = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      NAMES => {:type => ::Thrift::Types::LIST, :name => 'names', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partitions_by_names_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_partition_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    NEW_PART = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      NEW_PART => {:type => ::Thrift::Types::STRUCT, :name => 'new_part', :class => ::Partition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_partition_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_partitions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    NEW_PARTS = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      NEW_PARTS => {:type => ::Thrift::Types::LIST, :name => 'new_parts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_partitions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_partition_with_environment_context_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    NEW_PART = 3
    ENVIRONMENT_CONTEXT = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      NEW_PART => {:type => ::Thrift::Types::STRUCT, :name => 'new_part', :class => ::Partition},
      ENVIRONMENT_CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'environment_context', :class => ::EnvironmentContext}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_partition_with_environment_context_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rename_partition_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    NEW_PART = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::LIST, :name => 'part_vals', :element => {:type => ::Thrift::Types::STRING}},
      NEW_PART => {:type => ::Thrift::Types::STRUCT, :name => 'new_part', :class => ::Partition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rename_partition_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_config_value_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1
    DEFAULTVALUE = 2

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      DEFAULTVALUE => {:type => ::Thrift::Types::STRING, :name => 'defaultValue'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_config_value_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::ConfigValSecurityException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Partition_name_to_vals_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PART_NAME = 1

    FIELDS = {
      PART_NAME => {:type => ::Thrift::Types::STRING, :name => 'part_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Partition_name_to_vals_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Partition_name_to_spec_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PART_NAME = 1

    FIELDS = {
      PART_NAME => {:type => ::Thrift::Types::STRING, :name => 'part_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Partition_name_to_spec_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MarkPartitionForEvent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    EVENTTYPE = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::MAP, :name => 'part_vals', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      EVENTTYPE => {:type => ::Thrift::Types::I32, :name => 'eventType', :enum_class => ::PartitionEventType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @eventType.nil? || ::PartitionEventType::VALID_VALUES.include?(@eventType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field eventType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MarkPartitionForEvent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4
    O5 = 5
    O6 = 6

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::UnknownDBException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::UnknownTableException},
      O5 => {:type => ::Thrift::Types::STRUCT, :name => 'o5', :class => ::UnknownPartitionException},
      O6 => {:type => ::Thrift::Types::STRUCT, :name => 'o6', :class => ::InvalidPartitionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsPartitionMarkedForEvent_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_VALS = 3
    EVENTTYPE = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_VALS => {:type => ::Thrift::Types::MAP, :name => 'part_vals', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      EVENTTYPE => {:type => ::Thrift::Types::I32, :name => 'eventType', :enum_class => ::PartitionEventType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @eventType.nil? || ::PartitionEventType::VALID_VALUES.include?(@eventType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field eventType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsPartitionMarkedForEvent_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4
    O5 = 5
    O6 = 6

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::UnknownDBException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::UnknownTableException},
      O5 => {:type => ::Thrift::Types::STRUCT, :name => 'o5', :class => ::UnknownPartitionException},
      O6 => {:type => ::Thrift::Types::STRUCT, :name => 'o6', :class => ::InvalidPartitionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NEW_INDEX = 1
    INDEX_TABLE = 2

    FIELDS = {
      NEW_INDEX => {:type => ::Thrift::Types::STRUCT, :name => 'new_index', :class => ::Index},
      INDEX_TABLE => {:type => ::Thrift::Types::STRUCT, :name => 'index_table', :class => ::Table}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Index},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::AlreadyExistsException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    BASE_TBL_NAME = 2
    IDX_NAME = 3
    NEW_IDX = 4

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbname'},
      BASE_TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'base_tbl_name'},
      IDX_NAME => {:type => ::Thrift::Types::STRING, :name => 'idx_name'},
      NEW_IDX => {:type => ::Thrift::Types::STRUCT, :name => 'new_idx', :class => ::Index}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1
    O2 = 2

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::InvalidOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_index_by_name_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    INDEX_NAME = 3
    DELETEDATA = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      INDEX_NAME => {:type => ::Thrift::Types::STRING, :name => 'index_name'},
      DELETEDATA => {:type => ::Thrift::Types::BOOL, :name => 'deleteData'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_index_by_name_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_index_by_name_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    INDEX_NAME = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      INDEX_NAME => {:type => ::Thrift::Types::STRING, :name => 'index_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_index_by_name_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Index},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::NoSuchObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_indexes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    MAX_INDEXES = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      MAX_INDEXES => {:type => ::Thrift::Types::I16, :name => 'max_indexes', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_indexes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Index}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_index_names_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    MAX_INDEXES = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      MAX_INDEXES => {:type => ::Thrift::Types::I16, :name => 'max_indexes', :default => -1}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_index_names_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O2 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_table_column_statistics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    STATS_OBJ = 1

    FIELDS = {
      STATS_OBJ => {:type => ::Thrift::Types::STRUCT, :name => 'stats_obj', :class => ::ColumnStatistics}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_table_column_statistics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::InvalidInputException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_partition_column_statistics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    STATS_OBJ = 1

    FIELDS = {
      STATS_OBJ => {:type => ::Thrift::Types::STRUCT, :name => 'stats_obj', :class => ::ColumnStatistics}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_partition_column_statistics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::InvalidObjectException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::MetaException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::InvalidInputException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_table_column_statistics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    COL_NAME = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      COL_NAME => {:type => ::Thrift::Types::STRING, :name => 'col_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_table_column_statistics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ColumnStatistics},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::InvalidInputException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::InvalidObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_column_statistics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_NAME = 3
    COL_NAME = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_NAME => {:type => ::Thrift::Types::STRING, :name => 'part_name'},
      COL_NAME => {:type => ::Thrift::Types::STRING, :name => 'col_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_partition_column_statistics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ColumnStatistics},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::InvalidInputException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::InvalidObjectException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_partition_column_statistics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    PART_NAME = 3
    COL_NAME = 4

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      PART_NAME => {:type => ::Thrift::Types::STRING, :name => 'part_name'},
      COL_NAME => {:type => ::Thrift::Types::STRING, :name => 'col_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_partition_column_statistics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::InvalidObjectException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::InvalidInputException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_table_column_statistics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DB_NAME = 1
    TBL_NAME = 2
    COL_NAME = 3

    FIELDS = {
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TBL_NAME => {:type => ::Thrift::Types::STRING, :name => 'tbl_name'},
      COL_NAME => {:type => ::Thrift::Types::STRING, :name => 'col_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_table_column_statistics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2
    O3 = 3
    O4 = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException},
      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::InvalidObjectException},
      O4 => {:type => ::Thrift::Types::STRUCT, :name => 'o4', :class => ::InvalidInputException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_role_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROLE = 1

    FIELDS = {
      ROLE => {:type => ::Thrift::Types::STRUCT, :name => 'role', :class => ::Role}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_role_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_role_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROLE_NAME = 1

    FIELDS = {
      ROLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'role_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Drop_role_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_role_names_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_role_names_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Grant_role_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROLE_NAME = 1
    PRINCIPAL_NAME = 2
    PRINCIPAL_TYPE = 3
    GRANTOR = 4
    GRANTORTYPE = 5
    GRANT_OPTION = 6

    FIELDS = {
      ROLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'role_name'},
      PRINCIPAL_NAME => {:type => ::Thrift::Types::STRING, :name => 'principal_name'},
      PRINCIPAL_TYPE => {:type => ::Thrift::Types::I32, :name => 'principal_type', :enum_class => ::PrincipalType},
      GRANTOR => {:type => ::Thrift::Types::STRING, :name => 'grantor'},
      GRANTORTYPE => {:type => ::Thrift::Types::I32, :name => 'grantorType', :enum_class => ::PrincipalType},
      GRANT_OPTION => {:type => ::Thrift::Types::BOOL, :name => 'grant_option'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @principal_type.nil? || ::PrincipalType::VALID_VALUES.include?(@principal_type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field principal_type!')
      end
      unless @grantorType.nil? || ::PrincipalType::VALID_VALUES.include?(@grantorType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field grantorType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Grant_role_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Revoke_role_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROLE_NAME = 1
    PRINCIPAL_NAME = 2
    PRINCIPAL_TYPE = 3

    FIELDS = {
      ROLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'role_name'},
      PRINCIPAL_NAME => {:type => ::Thrift::Types::STRING, :name => 'principal_name'},
      PRINCIPAL_TYPE => {:type => ::Thrift::Types::I32, :name => 'principal_type', :enum_class => ::PrincipalType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @principal_type.nil? || ::PrincipalType::VALID_VALUES.include?(@principal_type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field principal_type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Revoke_role_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class List_roles_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRINCIPAL_NAME = 1
    PRINCIPAL_TYPE = 2

    FIELDS = {
      PRINCIPAL_NAME => {:type => ::Thrift::Types::STRING, :name => 'principal_name'},
      PRINCIPAL_TYPE => {:type => ::Thrift::Types::I32, :name => 'principal_type', :enum_class => ::PrincipalType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @principal_type.nil? || ::PrincipalType::VALID_VALUES.include?(@principal_type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field principal_type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class List_roles_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Role}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_privilege_set_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HIVEOBJECT = 1
    USER_NAME = 2
    GROUP_NAMES = 3

    FIELDS = {
      HIVEOBJECT => {:type => ::Thrift::Types::STRUCT, :name => 'hiveObject', :class => ::HiveObjectRef},
      USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
      GROUP_NAMES => {:type => ::Thrift::Types::LIST, :name => 'group_names', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_privilege_set_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PrincipalPrivilegeSet},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class List_privileges_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRINCIPAL_NAME = 1
    PRINCIPAL_TYPE = 2
    HIVEOBJECT = 3

    FIELDS = {
      PRINCIPAL_NAME => {:type => ::Thrift::Types::STRING, :name => 'principal_name'},
      PRINCIPAL_TYPE => {:type => ::Thrift::Types::I32, :name => 'principal_type', :enum_class => ::PrincipalType},
      HIVEOBJECT => {:type => ::Thrift::Types::STRUCT, :name => 'hiveObject', :class => ::HiveObjectRef}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @principal_type.nil? || ::PrincipalType::VALID_VALUES.include?(@principal_type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field principal_type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class List_privileges_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::HiveObjectPrivilege}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Grant_privileges_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRIVILEGES = 1

    FIELDS = {
      PRIVILEGES => {:type => ::Thrift::Types::STRUCT, :name => 'privileges', :class => ::PrivilegeBag}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Grant_privileges_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Revoke_privileges_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRIVILEGES = 1

    FIELDS = {
      PRIVILEGES => {:type => ::Thrift::Types::STRUCT, :name => 'privileges', :class => ::PrivilegeBag}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Revoke_privileges_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Set_ugi_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USER_NAME = 1
    GROUP_NAMES = 2

    FIELDS = {
      USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
      GROUP_NAMES => {:type => ::Thrift::Types::LIST, :name => 'group_names', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Set_ugi_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_delegation_token_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TOKEN_OWNER = 1
    RENEWER_KERBEROS_PRINCIPAL_NAME = 2

    FIELDS = {
      TOKEN_OWNER => {:type => ::Thrift::Types::STRING, :name => 'token_owner'},
      RENEWER_KERBEROS_PRINCIPAL_NAME => {:type => ::Thrift::Types::STRING, :name => 'renewer_kerberos_principal_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_delegation_token_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Renew_delegation_token_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TOKEN_STR_FORM = 1

    FIELDS = {
      TOKEN_STR_FORM => {:type => ::Thrift::Types::STRING, :name => 'token_str_form'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Renew_delegation_token_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Cancel_delegation_token_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TOKEN_STR_FORM = 1

    FIELDS = {
      TOKEN_STR_FORM => {:type => ::Thrift::Types::STRING, :name => 'token_str_form'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Cancel_delegation_token_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    O1 = 1

    FIELDS = {
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_file_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NODE_NAME = 1
    REPNR = 2
    DB_NAME = 3
    TABLE_NAME = 4

    FIELDS = {
      NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'},
      REPNR => {:type => ::Thrift::Types::I32, :name => 'repnr'},
      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
      TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_file_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SFile},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::FileOperationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Close_file_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FILE = 1

    FIELDS = {
      FILE => {:type => ::Thrift::Types::STRUCT, :name => 'file', :class => ::SFile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Close_file_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::FileOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Online_filelocation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FILE = 1

    FIELDS = {
      FILE => {:type => ::Thrift::Types::STRUCT, :name => 'file', :class => ::SFile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Online_filelocation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Toggle_safemode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Toggle_safemode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_file_by_id_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FID = 1

    FIELDS = {
      FID => {:type => ::Thrift::Types::I64, :name => 'fid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_file_by_id_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SFile},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::FileOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_file_by_name_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NODE = 1
    DEVID = 2
    LOCATION = 3

    FIELDS = {
      NODE => {:type => ::Thrift::Types::STRING, :name => 'node'},
      DEVID => {:type => ::Thrift::Types::STRING, :name => 'devid'},
      LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_file_by_name_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SFile},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::FileOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rm_file_logical_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FILE = 1

    FIELDS = {
      FILE => {:type => ::Thrift::Types::STRUCT, :name => 'file', :class => ::SFile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rm_file_logical_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::FileOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Restore_file_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FILE = 1

    FIELDS = {
      FILE => {:type => ::Thrift::Types::STRUCT, :name => 'file', :class => ::SFile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Restore_file_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::FileOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rm_file_physical_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FILE = 1

    FIELDS = {
      FILE => {:type => ::Thrift::Types::STRUCT, :name => 'file', :class => ::SFile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rm_file_physical_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1
    O2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::FileOperationException},
      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_node_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NODE_NAME = 1

    FIELDS = {
      NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_node_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Node},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_node_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NODE_NAME = 1
    IPL = 2

    FIELDS = {
      NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'},
      IPL => {:type => ::Thrift::Types::LIST, :name => 'ipl', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_node_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Node},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Del_node_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NODE_NAME = 1

    FIELDS = {
      NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Del_node_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_device_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DEVID = 1
    PROP = 2
    NODE_NAME = 3

    FIELDS = {
      DEVID => {:type => ::Thrift::Types::STRING, :name => 'devid'},
      PROP => {:type => ::Thrift::Types::I32, :name => 'prop'},
      NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_device_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Device},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Del_device_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DEVID = 1

    FIELDS = {
      DEVID => {:type => ::Thrift::Types::STRING, :name => 'devid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Del_device_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_node_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NODE_NAME = 1
    IPL = 2
    STATUS = 3

    FIELDS = {
      NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'},
      IPL => {:type => ::Thrift::Types::LIST, :name => 'ipl', :element => {:type => ::Thrift::Types::STRING}},
      STATUS => {:type => ::Thrift::Types::I32, :name => 'status'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Alter_node_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Node},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Find_best_nodes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NR = 1

    FIELDS = {
      NR => {:type => ::Thrift::Types::I32, :name => 'nr'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Find_best_nodes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Node}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_nodes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_nodes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Node}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDMStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDMStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate_in_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TBL = 1
    PARTS = 2
    FROM_DC = 3

    FIELDS = {
      TBL => {:type => ::Thrift::Types::STRUCT, :name => 'tbl', :class => ::Table},
      PARTS => {:type => ::Thrift::Types::LIST, :name => 'parts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}},
      FROM_DC => {:type => ::Thrift::Types::STRING, :name => 'from_dc'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate_in_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SFile}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate2_in_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TBL = 1
    PARTS = 2
    IDXS = 3
    FROM_DC = 4
    TO_NAS_DEVID = 5
    FILEMAP = 6

    FIELDS = {
      TBL => {:type => ::Thrift::Types::STRUCT, :name => 'tbl', :class => ::Table},
      PARTS => {:type => ::Thrift::Types::LIST, :name => 'parts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Partition}},
      IDXS => {:type => ::Thrift::Types::LIST, :name => 'idxs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Index}},
      FROM_DC => {:type => ::Thrift::Types::STRING, :name => 'from_dc'},
      TO_NAS_DEVID => {:type => ::Thrift::Types::STRING, :name => 'to_nas_devid'},
      FILEMAP => {:type => ::Thrift::Types::MAP, :name => 'fileMap', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::SFileLocation}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate2_in_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate_out_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TABLENAME = 2
    PARTNAMES = 3
    TO_DC = 4

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
      TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
      PARTNAMES => {:type => ::Thrift::Types::LIST, :name => 'partNames', :element => {:type => ::Thrift::Types::STRING}},
      TO_DC => {:type => ::Thrift::Types::STRING, :name => 'to_dc'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate_out_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate2_stage1_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TABLENAME = 2
    PARTNAMES = 3
    TO_DC = 4

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
      TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
      PARTNAMES => {:type => ::Thrift::Types::LIST, :name => 'partNames', :element => {:type => ::Thrift::Types::STRING}},
      TO_DC => {:type => ::Thrift::Types::STRING, :name => 'to_dc'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate2_stage1_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SFileLocation}},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate2_stage2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DBNAME = 1
    TABLENAME = 2
    PARTNAMES = 3
    TO_DC = 4
    TO_DB = 5
    TO_NAS_DEVID = 6

    FIELDS = {
      DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
      TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
      PARTNAMES => {:type => ::Thrift::Types::LIST, :name => 'partNames', :element => {:type => ::Thrift::Types::STRING}},
      TO_DC => {:type => ::Thrift::Types::STRING, :name => 'to_dc'},
      TO_DB => {:type => ::Thrift::Types::STRING, :name => 'to_db'},
      TO_NAS_DEVID => {:type => ::Thrift::Types::STRING, :name => 'to_nas_devid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Migrate2_stage2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMP_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NODE_NAME = 1
    DEVID = 2

    FIELDS = {
      NODE_NAME => {:type => ::Thrift::Types::STRING, :name => 'node_name'},
      DEVID => {:type => ::Thrift::Types::STRING, :name => 'devid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMP_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    O1 = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

